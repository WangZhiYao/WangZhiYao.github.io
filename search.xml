<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android 启动模式</title>
    <url>/articles/android-launch-mode/</url>
    <content><![CDATA[<h2 id="1-Standard"><a href="#1-Standard" class="headerlink" title="1.Standard"></a>1.Standard</h2><p>这个模式是默认的启动模式，即标准模式，在不指定启动模式的前提下，系统默认使用该模式启动 Activity ，每次启动一个 Activity 都会重写创建一个新的实例，不管这个实例存不存在，这种模式下，谁启动了该模式的 Activity ，该 Activity 就属于启动它的 Activity 的任务栈中。这个 Activity 它的 <code>onCreate()</code>，<code>onStart()</code>，<code>onResume()</code> 方法都会被调用。</p>
<h2 id="2-SingleTop"><a href="#2-SingleTop" class="headerlink" title="2.SingleTop"></a>2.SingleTop</h2><p>这个模式下，如果新的 Activity 已经位于栈顶，那么这个 Activity 不会被重写创建，同时它的 <code>onNewIntent()</code> 方法会被调用，通过此方法的参数我们可以去除当前请求的信息。如果栈顶不存在该Activity的实例，则情况与 standard 模式相同。需要注意的是这个Activity它的 <code>onCreate()</code>，<code>onStart()</code> 方法不会被调用，因为它并没有发生改变。</p>
<ul>
<li>当前栈中已有该 Activity 的实例并且该实例位于栈顶时，不会新建实例，而是复用栈顶的实例，并且会将 Intent 对象传入，回调 <code>onNewIntent()</code> 方法。</li>
<li>当前栈中已有该 Activity 的实例但是该实例不在栈顶时，其行为和 Standard 启动模式一样，依然会创建一个新的实例。</li>
<li>当前栈中不存在该 Activity 的实例时，其行为同 Standard 启动模式。</li>
</ul>
<h2 id="3-SingleInstance"><a href="#3-SingleInstance" class="headerlink" title="3.SingleInstance"></a>3.SingleInstance</h2><p>该模式也是单例的，但和 SingleTask 不同， SingleTask 只是任务栈内单例，系统里是可以有多个 SingleTask Activity 实例的，而 SingleInstance Activity 在整个系统里只有一个实例，启动一 SingleInstanceActivity 时，系统会创建一个新的任务栈，并且这个任务栈只有他一个Activity。</p>
<h2 id="4-SingleTask"><a href="#4-SingleTask" class="headerlink" title="4.SingleTask"></a>4.SingleTask</h2><p>该模式的 Activity 在同一个 Task 内只有一个实例，如果 Activity 已经位于栈顶，系统不会创建新的 Activity 实例，和 SingleTop 模式一样。但 Activity已经存在但不位于栈顶时，系统就会把该 Activity 移到栈顶，并把它上面的 Activity 出栈。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 中的 Parcelable 与 Serializable</title>
    <url>/articles/android-parcelable-serializable/</url>
    <content><![CDATA[<h2 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.作用</h2><p>Serializable 的作用是为了保存对象的属性到本地文件、数据库、网络流、rmi 以方便数据传输，当然这种传输可以是程序内的也可以是两个程序间的。</p>
<p>而 Android 的 Parcelable 的设计初衷是因为 Serializable 效率过慢。为了在程序内不同组件间以及不同 Android 程序(AIDL)高效的传输数据而设计，这些数据仅在内存中存在，Parcelable 是通过 IBinder 通信的消息的载体。</p>
<h2 id="2-区别"><a href="#2-区别" class="headerlink" title="2.区别"></a>2.区别</h2><p>两者最大的区别在于存储媒介的不同，Serializable 使用 I/O 读写存储在硬盘上，而 Parcelable 是直接在内存中读写。很明显，内存的读写速度通常大于 I/O 读写，所以在 Android 中传递数据优先选择 Parcelable。</p>
<p>Serializable 会使用反射，序列化和反序列化过程需要大量的 I/O 操作，会在序列化的时候创建许多临时对象，容易触发GC。</p>
<p>Parcelable 自已实现封送和解封（marshalled &amp; unmarshalled）操作不需要用反射，数据也存放在 Native 内存中，效率要快很多。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>Android RecyclerView 将指定 Item 滑动到顶部</title>
    <url>/articles/android-recyclerview-smoothscroller/</url>
    <content><![CDATA[<p>只能在 <code>LayoutManager</code> 为 <strong>LinearLayoutManager 及其子类</strong>的情况下使用！！</p>
<span id="more"></span>

<p>在 <code>LinearLayoutManager</code> 中的 <code>smoothScrollToPosition</code> 是通过 <code>LinearSmoothScroller</code> 来实现滚动的，每次调用都会新建一个 LinearSmoothScroller 来执行操作：</p>
<figure class="highlight java"><figcaption><span>LinearLayoutManager.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">smoothScrollToPosition</span><span class="params">(RecyclerView recyclerView,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   RecyclerView.State state,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    LinearSmoothScroller linearSmoothScroller = <span class="keyword">new</span> LinearSmoothScroller(recyclerView.getContext());</span><br><span class="line">    linearSmoothScroller.setTargetPosition(position);</span><br><span class="line">    startSmoothScroll(linearSmoothScroller);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么查看 <code>LinearSmoothScroller</code> 的代码，里面有3个参数：</p>
<figure class="highlight java"><figcaption><span>LinearSmoothScroller.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Align child view&#x27;s left or top with parent view&#x27;s left or top</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #calculateDtToFit(int, int, int, int, int)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #calculateDxToMakeVisible(android.view.View, int)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #calculateDyToMakeVisible(android.view.View, int)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SNAP_TO_START = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Align child view&#x27;s right or bottom with parent view&#x27;s right or bottom</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #calculateDtToFit(int, int, int, int, int)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #calculateDxToMakeVisible(android.view.View, int)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #calculateDyToMakeVisible(android.view.View, int)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SNAP_TO_END = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Decides if the child should be snapped from start or end, depending</span></span><br><span class="line"><span class="comment"> * on where it currently is in relation to its parent.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;For instance, if the view is virtually on the left of RecyclerView,</span></span><br><span class="line"><span class="comment"> * using &#123;<span class="doctag">@code</span> SNAP_TO_ANY&#125; is the same as using &#123;<span class="doctag">@code</span> SNAP_TO_START&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #calculateDtToFit(int, int, int, int, int)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #calculateDxToMakeVisible(android.view.View, int)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #calculateDyToMakeVisible(android.view.View, int)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SNAP_TO_ANY = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>SNAP_TO_START</strong> 表示将子视图对齐到 RecyclerView 的左边（水平滑动）或者顶部（垂直滑动）</li>
<li><strong>SNAP_TO_END</strong> 表示将子视图对齐到 RecyclerView 的右边（水平滑动）或者底部（垂直滑动）</li>
<li><strong>SNAP_TO_ANY</strong> 根据子视图的当前位置与父布局的关系，决定使用上面的哪种。</li>
</ul>
<p>这3个常量在如下两个函数上使用：</p>
<figure class="highlight java"><figcaption><span>LinearSmoothScroller.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * When scrolling towards a child view, this method defines whether</span></span><br><span class="line"><span class="comment"> * we should align the leftor the right edge of the child with the </span></span><br><span class="line"><span class="comment"> * parent RecyclerView.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> SNAP_TO_START, SNAP_TO_END or SNAP_TO_ANY;</span></span><br><span class="line"><span class="comment"> * depending on the current target vector</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #SNAP_TO_START</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #SNAP_TO_END</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #SNAP_TO_ANY</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getHorizontalSnapPreference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mTargetVector == <span class="keyword">null</span> || mTargetVector.x == <span class="number">0</span> ? SNAP_TO_ANY :</span><br><span class="line">            mTargetVector.x &gt; <span class="number">0</span> ? SNAP_TO_END : SNAP_TO_START;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * When scrolling towards a child view, this method defines whether</span></span><br><span class="line"><span class="comment"> * we should align the top or the bottom edge of the child with the</span></span><br><span class="line"><span class="comment"> * parent RecyclerView.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> SNAP_TO_START, SNAP_TO_END or SNAP_TO_ANY;</span></span><br><span class="line"><span class="comment"> * depending on the current target vector</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #SNAP_TO_START</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #SNAP_TO_END</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #SNAP_TO_ANY</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getVerticalSnapPreference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mTargetVector == <span class="keyword">null</span> || mTargetVector.y == <span class="number">0</span> ? SNAP_TO_ANY :</span><br><span class="line">            mTargetVector.y &gt; <span class="number">0</span> ? SNAP_TO_END : SNAP_TO_START;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 RecyclerView 为水平滑动时会使用 <code>getHorizontalSnapPreference</code> ，为垂直滑动时会使用 <code>getVerticalSnapPreference</code> ，所以可以通过继承 <code>LinearSmoothScroller</code> 重写 <code>getHorizontalSnapPreference()</code> 或 <code>getVerticalSnapPreference</code> 来实现将指定 Item 滑动到顶部：</p>
<figure class="highlight java"><figcaption><span>ScrollToTopSmoothScroller.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrollToTopSmoothScroller</span> <span class="keyword">extends</span> <span class="title">LinearSmoothScroller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScrollToTopSmoothScroller</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getHorizontalSnapPreference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SNAP_TO_START;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getVerticalSnapPreference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SNAP_TO_START;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ScrollToTopSmoothScroller smoothScroller = <span class="keyword">new</span> ScrollToTopSmoothScroller(context);</span><br><span class="line">smoothScroller.setTargetPosition(position);</span><br><span class="line">layoutManager.startSmoothScroll(smoothScroller);</span><br></pre></td></tr></table></figure>

<p>不可复用，每次滑动需要重新创建</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>RecyclerView</tag>
      </tags>
  </entry>
  <entry>
    <title>RecyclerView ItemDecoration 均分 Item 间隔</title>
    <url>/articles/android-recyclerview-spaceing-item-decoration/</url>
    <content><![CDATA[<p>在 RecyclerView 中使用 ItemDecoration 重写 <strong>getItemOffsets</strong> 设置每个 Item 的间隔，支持各种 LayoutManager:</p>
<figure class="highlight java"><figcaption><span>SpacingItemDecoration.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpacingItemDecoration</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemDecoration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> spanCount;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> spacing;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> includeEdge;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpacingItemDecoration</span><span class="params">(<span class="keyword">int</span> spacing, <span class="keyword">int</span> spanCount, <span class="keyword">boolean</span> includeEdge)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.spacing = spacing;</span><br><span class="line">        <span class="keyword">this</span>.spanCount = spanCount;</span><br><span class="line">        <span class="keyword">this</span>.includeEdge = includeEdge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(<span class="meta">@NotNull</span> Rect outRect, <span class="meta">@NotNull</span> View view, RecyclerView parent,</span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="meta">@NotNull</span> RecyclerView.State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> position = parent.getChildAdapterPosition(view);</span><br><span class="line">        <span class="keyword">int</span> column = position % spanCount;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (includeEdge) &#123;</span><br><span class="line">            outRect.left = spacing - column * spacing / spanCount;</span><br><span class="line">            outRect.right = (column + <span class="number">1</span>) * spacing / spanCount;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (position &lt; spanCount) &#123;</span><br><span class="line">                outRect.top = spacing;</span><br><span class="line">            &#125;</span><br><span class="line">            outRect.bottom = spacing;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            outRect.left = column * spacing / spanCount;</span><br><span class="line">            outRect.right = spacing - (column + <span class="number">1</span>) * spacing / spanCount;</span><br><span class="line">            <span class="keyword">if</span> (position &gt;= spanCount) &#123;</span><br><span class="line">                outRect.top = spacing;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>RecyclerView</tag>
      </tags>
  </entry>
  <entry>
    <title>TextView 添加下划线，删除线，加粗</title>
    <url>/articles/android-textview-underline-bold-strikethrough/</url>
    <content><![CDATA[<p>通过 TextView 的 <code>setPaintFlags</code> 方式来添加下划线，删除线，加粗，在原有的 PaintFlags 上添加新的 Flag 而不清除原有的 Flags</p>
<ul>
<li><p>Paint.ANTI_ALIAS_FLAG 抗锯齿</p>
</li>
<li><p>Paint.FILTER_BITMAP_FLAG 用于对 Bitmap 进行转换（例如缩放）时对 Bitmap 进行双线性过滤</p>
</li>
<li><p>Paint.DITHER_FLAG  会影响对比设备精度更高的颜色进行下采样的方式</p>
</li>
<li><p>Paint.UNDERLINE_TEXT_FLAG 下划线</p>
</li>
<li><p>Paint.STRIKE_THRU_TEXT_FLAG 删除线</p>
</li>
<li><p>Paint.FAKE_BOLD_TEXT_FLAG 伪粗体，并不是通过选用更高 weight 的字体让文字变粗，而是通过程序在运行时把文字给「描粗」</p>
</li>
<li><p>Paint.LINEAR_TEXT_FLAG 会调整文本绘制操作以平滑处理缩放比例，应当与 Paint.SUBPIXEL_TEXT_FLAG 一起使用</p>
</li>
<li><p>Paint.SUBPIXEL_TEXT_FLAG 亚像素级的抗锯齿</p>
</li>
</ul>
<figure class="highlight java"><figcaption><span>TextViewUtils.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextViewUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addUnderLine</span><span class="params">(TextView textView)</span> </span>&#123;</span><br><span class="line">        addPaintFlag(textView, Paint.UNDERLINE_TEXT_FLAG);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeUnderLine</span><span class="params">(TextView textView)</span> </span>&#123;</span><br><span class="line">        removePaintFlag(textView, Paint.UNDERLINE_TEXT_FLAG);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addStrikeThrough</span><span class="params">(TextView textView)</span> </span>&#123;</span><br><span class="line">        addPaintFlag(textView, Paint.STRIKE_THRU_TEXT_FLAG);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeStrikeThrough</span><span class="params">(TextView textView)</span> </span>&#123;</span><br><span class="line">        removePaintFlag(textView, Paint.STRIKE_THRU_TEXT_FLAG);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFakeBold</span><span class="params">(TextView textView)</span> </span>&#123;</span><br><span class="line">        addPaintFlag(textView, Paint.FAKE_BOLD_TEXT_FLAG);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeFakeBold</span><span class="params">(TextView textView)</span> </span>&#123;</span><br><span class="line">        removePaintFlag(textView, Paint.FAKE_BOLD_TEXT_FLAG);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addPaintFlag</span><span class="params">(TextView textView, <span class="keyword">int</span> paintFlag)</span> </span>&#123;</span><br><span class="line">        textView.setPaintFlags(textView.getPaintFlags() | paintFlag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removePaintFlag</span><span class="params">(TextView textView, <span class="keyword">int</span> paintFlag)</span> </span>&#123;</span><br><span class="line">        textView.setPaintFlags(textView.getPaintFlags() &amp; (~paintFlag));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>TextView</tag>
      </tags>
  </entry>
  <entry>
    <title>HPE Proliant Microserver Gen10 Plus</title>
    <url>/articles/hpe-proliant-microserver-gen10-plus/</url>
    <content><![CDATA[<blockquote>
<p>Update：再通过折腾发现，的确是因为我的显示器 DP 版本过高所以一开始视频没有输出。</p>
</blockquote>
<blockquote>
<p>Update：后续折腾发现，DP 口没有输出有可能是因为我的显示器 DP 口为 1.2 而 Gen10 Plus 自带的 DP 口为 1.0 导致的，而且，在通过 VGA-HDMI 的转换头之后再通过 HDMI 线连接到我显示器的 HDMI 口依旧没有输出，但是我同时将 DP 口 也插上线连接到我显示器之后 VGA 口就有输出了(Round 3 那会儿能点亮是我阴差阳错把 DP 口也一起插上了)，这真是人间迷惑行为。但是一切都有可能是我显示器的原因，因为我没有多的屏幕，所以不好确定到底是什么原因。</p>
</blockquote>
<blockquote>
<p>配置：</p>
<ul>
<li>型号：P16006-001</li>
<li>CPU：Xeon E-2224</li>
<li>内存：16GB ECC</li>
<li>不带硬盘</li>
<li>不带 Smart Array 100i Raid 卡</li>
<li>不带 iLO Enablement Kit</li>
<li>只有一个 PCI-E 接口！只有一个 PCI-E 接口！只有一个 PCI-E 接口！</li>
</ul>
</blockquote>
<span id="more"></span>

<p>再是花费：￥4597.77 ($655.94) + ￥647.40 (转运) + ￥599.70 (13%关税) = ￥5844.87</p>
<p>购买过程：</p>
<ol>
<li>3月26日从美亚购买的 Gen10 Plus，一开始在美亚买的时候是639刀左右，然后一觉醒来订单被取消了，说没有库存了，然后再一搜，上了个655刀的，这个操作有点迷惑，但是想了很久了，没办法，赶紧再下单，发的UPS</li>
<li>3月28日到达顺丰美国转运仓，然后走的顺丰海淘转运，入库时称重为7.25kg</li>
<li>4月1日顺丰收取快件，疫情原因加上周末美国那边不上班，所以拖了很久</li>
<li>4月2日开始转运到纽约</li>
<li>4月5日到达香港，然后清明节海关放假</li>
<li>4月7日到达广州，进行清关，由于顺丰海淘是阳光清关，主动申报，所以必被税</li>
<li>4月8日清关完成</li>
<li>4月9日到达广州白云机场，准备国内派送</li>
<li>4月10日签收</li>
</ol>
<h2 id="Round-1"><a href="#Round-1" class="headerlink" title="Round 1"></a>Round 1</h2><p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200410_191257.webp" alt="签收"></p>
<p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200410_193534.webp" alt="开箱"></p>
<p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200410_193551.webp" alt="开箱"></p>
<p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200410_193702.webp" alt="开箱"></p>
<p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200410_193742.webp" alt="开箱"></p>
<p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200410_194406.webp" alt="开箱"></p>
<p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200410_194440.webp" alt="注意美版的电源插头"></p>
<p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200410_195443.webp" alt="机箱内部-侧面"></p>
<p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200410_200213.webp" alt="机箱内部-正面"></p>
<p>同时我还买了一块三星 860EVO 250G 用来做系统盘 和东芝 P300 2T 用来存数据之类的：</p>
<p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200411_014937.webp" alt="Samsung 860 EVO 250G 与 东芝P300 2T"></p>
<p>装上之后发现，2.5寸的三星SSD插在1号硬盘位也就是左上角完全是靠接口卡住的，而我又有强迫症，这样不是长久之计，请注意由于硬盘接口在左边，所以普通的硬盘托架是没有用的，因为那玩意是把硬盘固定在中间，实际上要在硬盘架的左边：</p>
<p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200411_014624.webp" alt="4个硬盘位"></p>
<p>然后我就又买了一个2.5寸转3.5寸的托架，同时这个电源插口是美国标准，于是又买了个电源插头转换器：</p>
<p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200411_012429.webp" alt="硬盘支架与电源插头转换器"></p>
<p>好在这个电源跟以前的笔记本电源是一样的，分为插头跟变压器，刚好室友的笔记本也是这样的，所以就借了室友的笔记本电源插头来使用一下，然后我又翻出来一根DP线，跟我的显示器连接起来，然后沙雕的事情就发生了：</p>
<p><strong>DP口没有输出</strong></p>
<p><strong>DP口没有输出</strong></p>
<p><strong>DP口没有输出</strong></p>
<p>然后我又买了根 HDMI 转 VGA 的线：</p>
<p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200411_020715.webp" alt="实际上买错了，不应该是 HDMI 转 VGA，应该是 VGA 转 HDMI 转换头"></p>
<p>从说明书中可以得知 Gen10 Plus 中 CPU 为 E-2224 的这款没有核显，同时自带的 DP 口为1.0：</p>
<p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200411_021301.webp" alt="Gen10 电子说明书"></p>
<p>DP1.0版本的输出1080P都悬，更何况我打算在上面装 Plex 当 HTPC，所以我又下单买了一块 GT 1030 亮机卡（其实现在想起来完全没必要，我用不上硬解）：</p>
<p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200411_012503.webp" alt="技嘉 GT 1030"></p>
<p>所以目前状况就卡在了机都没点亮的状态下…</p>
<p>等后续快递都到了再继续折腾</p>
<h2 id="Round-2"><a href="#Round-2" class="headerlink" title="Round 2"></a>Round 2</h2><p>今天显卡到了，GT 1030 半高亮机卡，拆开后盖，取下主板上的PCI-E扩展板，将这个半高显卡插进去再装回到主板上：</p>
<p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200412_005528.webp" alt="这个半高显卡的散热鳍片真的很锋利"></p>
<p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200412_005634.webp" alt="将显卡插入 PCI-E 槽"></p>
<p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200412_005756.webp" alt="装完的样子"></p>
<p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200412_010202.webp" alt="机箱背面"></p>
<p>关于这个 PCI-E 槽可以有很多选择：万兆网卡，启动盘等等，具体可以看下面这个视频，里面介绍了这个 PCI-E 口可以怎么玩，以及在合理的情况下 CPU 可以更换成什么：</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/x-_CyKuJz9s" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>所以这个 PCI-E 槽最终用来做什么还是看个人喜好 ，Gen10 Plus 的 E2224 版本是没有核显的，而我打算装个 Plex 来管理我的电影，所以需要一张独立显卡用来解码视频等，于是我就上了一张显卡。</p>
<p>在显卡装上去之后，我用了一根 HDMI 线来连接到我的显示器，然后开机，终于点亮了，但是又遇到一个很沙雕的问题：当我按下 F10 准备在系统自检之后进入 Intelligent Provisioning 用官方推荐的方式来安装系统时，画面一黑提示：no such device : EMBED340。</p>
<p>百思不得其解，到底是哪里出了问题，又去看了下文档，下了个 Intelligent Provisioning 的升级包(SSP)放在U盘里，准备升级下 Intelligent Provisioning 试试，因为我看到 F9 的话能进到 BIOS 设置，里面有从媒体选择升级包的选项，然后把U盘插到前面的 USB 口，又沙雕了，进去发现媒体列表里根本没有U盘这个东西.</p>
<p>既然官方的路子走不通，我就只能自己再用 Rufus 做了个 Win10 的启动盘，想着既然有了视频输出，系统总该能装上了，然后又是这种沙雕问题，画面卡在了 lanuch efi.ini 大概是这个，不太记得了，反正是加载 Win10 安装文件的过程，又是百思不得其解.</p>
<p>直接安装不行，我用 PE 装总可以吧？然后我又给U盘装了个 WePE ，拖了个 WinServer 2019 的 iso 进去，然后重启，从U盘启动，当我从U盘启动之后，WePE 有个选分辨率的界面，我选择之后，又沙雕了，屏幕黑了，但是从我的显示器指示灯来看，这个 HDMI 口是有输出的，但是就是一片黑，等了很久还是黑的，这就很迷惑了.</p>
<p>就目前为止两个让我迷惑的点：1.主板上自带的DP口到底是做什么用的，2.我上了独显之后为什么离开 BIOS 屏幕就黑了但是有视频输出</p>
<p>没办法，没有 VGA 的线，一切只有等明天 VGA 的线到了再看到底是怎么回事.</p>
<h2 id="Round-3"><a href="#Round-3" class="headerlink" title="Round 3"></a>Round 3</h2><p>由于之前买错了，买了根 HDMI 转 VGA 线，用不了，实际上应该买的是 VGA-HDMI 的转接头，所以前面买的线换货耽误了一天，刚好与硬盘托架一起到了：</p>
<p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200413_234052.webp" alt="应该是用 VGA 转 HDMI 转接器"></p>
<p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200413_201633.webp" alt="使用硬盘托架固定 SSD 之后"></p>
<p>然后使用 VGA-HDMI 转接头，连接 HDMI 线到我的显示器，然后开机，终于，亮了，然后进入 Intelligent Provisioning , 啊 ！！！</p>
<p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200413_202836.webp" alt="成功亮机"></p>
<p>然后就是很沙雕的问题，不知道是网的原因还是什么，反正一直装系统失败，然后我就去 HPE 官网下了个定制的 VMware ESXI 放到U盘然后插到前面的 USB 口，通过 Intelligent Provisioning 使用 U 盘安装，果然一下就 OK 了.</p>
<p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200413_221016.webp"></p>
<p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200413_205355.webp" alt="使用 Intelligent Provisioning 安装 VMware ESXI"></p>
<p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200413_220744.webp" alt="VMware ESXI 安装中"></p>
<p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200413_224954.webp" alt="VMware ESXI 安装完毕"></p>
<p>VMware ESXI 安装完成.</p>
<p>在安装的过程中需要输入密码，密码必须包含大小写数字与符号，其中符号这个用 <code>.</code> 通过不了，但是用 <code>!</code> 就可以，这个很迷…</p>
<p><img src="/images/articles/hpe-proliant-microserver-gen10-plus/20200413_232214.webp" alt="VMware ESXI 后台"></p>
<p>暂时折腾完毕。</p>
]]></content>
      <categories>
        <category>Microserver Gen 10 Plus</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>Java HashMap 与 Hashtable 的区别</title>
    <url>/articles/java-hashmap-hashtab/</url>
    <content><![CDATA[<h2 id="1-HashMap"><a href="#1-HashMap" class="headerlink" title="1.HashMap"></a>1.HashMap</h2><p>HashMap 不是线程安全的，HashMap 是 Map 接口的实现类，是将键映射到值的对象，其中键和值都是对象，并且不能包含重复键，但可以包含重复值。HashMap 允许 null key 和 null value， HashMap 是 HashTable 的轻量级实现 ，由于非线程安全，效率可能会比 Hashtable 高。</p>
<p>需要线程安全的 HashMap 可以使用 <strong>ConcurrentHashMap</strong>，其中 put 方法使用了 synchronized 加上线程锁。</p>
<h2 id="2-Hashtable"><a href="#2-Hashtable" class="headerlink" title="2.Hashtable"></a>2.Hashtable</h2><p>Hashtable 是线程安全的，是 Map 接口的实现类，不允许 null key 和 null value，主要方法都使用了 synchronized 线程锁。</p>
<h2 id="3-主要区别"><a href="#3-主要区别" class="headerlink" title="3.主要区别"></a>3.主要区别</h2><ul>
<li>HashMap允许将 null 作为一个 entry 的 key 或者 value，而 Hashtable 不允许。</li>
<li>HashMap 把 Hashtable 的 contains 方法去掉了，改成 containsValue 和 containsKey。因为 contains 方法容易让人引起误解。</li>
<li>Hashtable 继承自 Dictionary，而 HashMap 继承自 AbstractMap，而 AbstractMap 是 Java1.2 引进的 Map 接口的一个实现类。</li>
<li>Hashtable 的方法是线程安全的，而 HashMap 不是，在多个线程访问 Hashtable 时，不需要自己为它的方法实现同步，而 HashMap 就必须手动提供外同步。</li>
<li>HashTable中的 initialCapacity 初始大小是11，增加的方式是 (oldCapacity &lt;&lt; 1) + 1 即为 oldCapacity * 2 + 1。HashMap 中 initialCapacity 数组的默认大小是 16，增加的方式是 oldCapacity &lt;&lt; 1。 loadFactor 同为 0.75。</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>Microserver Gen10 Plus 安装 Proxmox VE</title>
    <url>/articles/microserver-gen10-plus-proxmox-ve/</url>
    <content><![CDATA[<h2 id="1-下载镜像"><a href="#1-下载镜像" class="headerlink" title="1.下载镜像"></a>1.下载镜像</h2><p>首先是去 Proxmox VE 的 <a href="https://www.proxmox.com/en/downloads/category/iso-images-pve">官网</a> 下载镜像</p>
<p><img src="/images/articles/microserver-gen10-plus-proxmox-ve/official-website.webp" alt="Proxmox VE 官网"></p>
<span id="more"></span>

<h2 id="2-制作启动盘"><a href="#2-制作启动盘" class="headerlink" title="2.制作启动盘"></a>2.制作启动盘</h2><p>使用 Rufus 或者 UltraISO 或者 balenaEtcher 都行，将镜像刷进 U盘 内，制作成启动盘。</p>
<h2 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3.安装</h2><p>建议将 U盘 插在 Gen10 Plus 前面板的 USB 口上，这样速度会快一点（由于没有买 iLO Enablement Kit，所以我把机器搬到桌子上连到显示器上，全程只能拍屏幕），接着启动电源，等到进入这个界面的时候按 F11，到启动菜单，选择你的 U盘 启动：</p>
<p><img src="/images/articles/microserver-gen10-plus-proxmox-ve/20200420_211154.webp"></p>
<p>然后就进入 Proxmox VE 的安装界面，选择第一个 <strong>Install Proxmox VE</strong> ：</p>
<p><img src="/images/articles/microserver-gen10-plus-proxmox-ve/20200420_214324.webp"></p>
<p>点击右下角的 <strong>I agree</strong> :</p>
<p><img src="/images/articles/microserver-gen10-plus-proxmox-ve/20200420_211307.webp"></p>
<p>然后选择要安装到哪个硬盘，在这里可以点击旁边的 <strong>Options</strong> 按钮设置成 zfs 做软 raid ：</p>
<p><img src="/images/articles/microserver-gen10-plus-proxmox-ve/20200420_211320.webp"></p>
<p>打开 <strong>Options</strong>，里面默认是 **ext4 **:</p>
<p><img src="/images/articles/microserver-gen10-plus-proxmox-ve/20200420_211340.webp"></p>
<p>可以点击下拉菜单选择其他：</p>
<blockquote>
<p>ext3, ext4, xfs, raid 0, raid 1, raid 10, raidz 1, raidz 2, raidz 3</p>
</blockquote>
<p><img src="/images/articles/microserver-gen10-plus-proxmox-ve/20200420_211359.webp"></p>
<p>再接下来就是填写 国家与时区还有键盘布局，国家填好之后时区会自动跟着变，键盘布局一般不需要改：</p>
<p><img src="/images/articles/microserver-gen10-plus-proxmox-ve/20200420_211433.webp"></p>
<p>再接下来就是设置 root 的密码以及邮箱：</p>
<p><img src="/images/articles/microserver-gen10-plus-proxmox-ve/20200420_211450.webp"></p>
<p>再是到这里设置 网络，<strong>网卡要选择 开头为 eno 的</strong>，根据你网线插在哪个口选择对应的，千万不要选错，不然进不了管理后台(坑了我很久，我还以为是我设置错了)，再接着设置 主机名，ip，掩码，网关与dns等：</p>
<p><img src="/images/articles/microserver-gen10-plus-proxmox-ve/20200420_214444.webp"></p>
<p>最后是确认界面，确认无误之后，就点击 <strong>Install</strong> 进行安装：</p>
<p><img src="/images/articles/microserver-gen10-plus-proxmox-ve/20200420_214541.webp"></p>
<p>安装中：</p>
<p><img src="/images/articles/microserver-gen10-plus-proxmox-ve/20200420_211709.webp"></p>
<p>最后跳转到这个界面的时候就安装成功了，点击右下角 <strong>Reboot</strong> 重启，正常启动：</p>
<p><img src="/images/articles/microserver-gen10-plus-proxmox-ve/20200420_211915.webp"></p>
<p>最后就是进入 Web UI 界面进行管理了，要注意的是 地址是：<strong><a href="https://server-ip:8006/">https://server-ip:8006</a></strong>，是 <strong>https</strong> 而不是 http：</p>
<p><img src="/images/articles/microserver-gen10-plus-proxmox-ve/20200422_223141.webp"></p>
]]></content>
      <categories>
        <category>Microserver Gen 10 Plus</category>
      </categories>
      <tags>
        <tag>Proxmox VE</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 连接控制插件</title>
    <url>/articles/mysql-connection-control-plugin/</url>
    <content><![CDATA[<p>最近查看服务器日志发现一堆IP尝试爆破我的 MySQL，我的数据库端口并没有修改，问题并不大，但是让这些IP无代价的爆破生成一堆日志让我很烦，所以查了一下各种解决方案，有提到 Fail2Ban，但是我服务器已经装了 DenyHosts，所以并不想再引入一个功能上有重复的包，所以使用了MySQL的 <code>Connection-Control</code> 插件，下面是它官网的描述：</p>
<span id="more"></span>

<blockquote>
<p>As of MySQL 5.7.17, MySQL Server includes a plugin library that enables administrators to introduce an increasing delay in server response to clients after a certain number of consecutive failed connection attempts. This capability provides a deterrent that slows down brute force attacks that attempt to access MySQL user accounts.</p>
</blockquote>
<p>这个插件库包含两个插件：</p>
<ul>
<li>CONNECTION_CONTROL : 用来控制登录失败的次数及延迟响应时间</li>
<li>CONNECTION_CONTROL_FAILED_LOGIN_ATTEMPTS : 该表将登录失败的操作记录至 <code>information_schema</code> 库中</li>
</ul>
<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">INSTALL PLUGIN CONNECTION_CONTROL SONAME <span class="string">&#x27;connection_control.so&#x27;</span>;</span><br><span class="line">INSTALL PLUGIN CONNECTION_CONTROL_FAILED_LOGIN_ATTEMPTS SONAME <span class="string">&#x27;connection_control.so&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="2-查看是是否安装与开启状态"><a href="#2-查看是是否安装与开启状态" class="headerlink" title="2.查看是是否安装与开启状态"></a>2.查看是是否安装与开启状态</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> PLUGIN_NAME, PLUGIN_STATUS <span class="keyword">FROM</span> INFORMATION_SCHEMA.PLUGINS <span class="keyword">WHERE</span> PLUGIN_NAME <span class="keyword">LIKE</span> <span class="string">&#x27;connection%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>输出类似如下：</p>
<table>
<thead>
<tr>
<th>PLUGIN_NAME</th>
<th>PLUGIN_STATUS</th>
</tr>
</thead>
<tbody><tr>
<td>CONNECTION_CONTROL</td>
<td>ACTIVE</td>
</tr>
<tr>
<td>CONNECTION_CONTROL_FAILED_LOGIN_ATTEMPTS</td>
<td>ACTIVE</td>
</tr>
</tbody></table>
<p>其中 <strong>PLUGIN_STATUS</strong> 状态为 <strong>ACTIVE</strong> 则证明插件都已经开启。</p>
<h2 id="3-查看参数"><a href="#3-查看参数" class="headerlink" title="3.查看参数"></a>3.查看参数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%connection_control%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>输出类似如下：</p>
<table>
<thead>
<tr>
<th>Variable_name</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>connection_control_failed_connections_threshold</td>
<td>3</td>
</tr>
<tr>
<td>connection_control_max_connection_delay</td>
<td>86400000</td>
</tr>
<tr>
<td>connection_control_min_connection_delay</td>
<td>300000</td>
</tr>
</tbody></table>
<p>其中：</p>
<ul>
<li><strong>connection_control_failed_connections_threshold</strong> 代表失败尝试的次数，默认为3，表示当连接失败3次后启用连接控制，0表示不开启。</li>
<li><strong>connection_control_max_connection_delay</strong> 单位为 <strong>毫秒</strong> ，最大响应延迟的时间，默认约25天，我的设置是1天。</li>
<li><strong>connection_control_min_connection_delay</strong> 单位为 <strong>毫秒</strong>，<strong>每次</strong> 响应延迟的 <strong>最小增量</strong>，默认1000毫秒，我的设置是5分钟。</li>
</ul>
<h2 id="4-修改参数"><a href="#4-修改参数" class="headerlink" title="4.修改参数"></a>4.修改参数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> connection_control_failed_connections_threshold <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> connection_control_max_connection_delay <span class="operator">=</span> <span class="number">86400000</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> connection_control_min_connection_delay <span class="operator">=</span> <span class="number">300000</span>;</span><br></pre></td></tr></table></figure>

<p> <strong>通过以上方式重新设置参数或者重启数据库会导致配置还原，同时，<code>CONNECTION_CONTROL_FAILED_LOGIN_ATTEMPTS</code> 中的数据也会被清空，当前控制连接的次数也会被重置</strong></p>
<p><strong>建议通过在配置文件中的 <code>[mysqld]</code> 下加入以下内容的方式设置参数</strong>，这样才能保证即使重启也不需要重新设置：</p>
<figure class="highlight plain"><figcaption><span>mysqld</span></figcaption><table><tr><td class="code"><pre><span class="line"># Connection Control</span><br><span class="line">plugin-load-add &#x3D; connection_control.so</span><br><span class="line">connection_control_failed_connections_threshold &#x3D; 1</span><br><span class="line">connection_control_max_connection_delay &#x3D; 86400000</span><br><span class="line">connection_control_min_connection_delay &#x3D; 300000</span><br></pre></td></tr></table></figure>

<h2 id="5-查看当前控制连接的次数"><a href="#5-查看当前控制连接的次数" class="headerlink" title="5.查看当前控制连接的次数"></a>5.查看当前控制连接的次数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;Connection_control_delay_generated&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="6-查看所有登录操作失败的记录"><a href="#6-查看所有登录操作失败的记录" class="headerlink" title="6.查看所有登录操作失败的记录"></a>6.查看所有登录操作失败的记录</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use information_schema;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> CONNECTION_CONTROL_FAILED_LOGIN_ATTEMPTS;</span><br></pre></td></tr></table></figure>

<h2 id="7-卸载插件"><a href="#7-卸载插件" class="headerlink" title="7.卸载插件"></a>7.卸载插件</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UNINSTALL PLUGIN CONNECTION_CONTROL;</span><br><span class="line">UNINSTALL PLUGIN CONNECTION_CONTROL_FAILED_LOGIN_ATTEMPTS;</span><br></pre></td></tr></table></figure>

<p>如果使用的是在配置文件中设置的参数，在卸载时也需要删除对应配置</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Proxmox VE 在 Ubuntu 中 N卡直通</title>
    <url>/articles/proxmox-ve-ubuntu-nvidia-passthrough/</url>
    <content><![CDATA[<p>由于 Microserver Gen10 Plus 中 CPU 为 E-2224 这款没有核显，而我有 HTPC 的需求，所以我在唯一的一个 PCI-E 接口上了一块 GT-1030，然后由于向 ESXI 中虚拟机传输文件的速度实在是慢得不行，我千兆的内网，传输文件时只能跑出 100-200mbps，不能忍，所以我改安装 Proxmox VE 了。</p>
<span id="more"></span>

<h2 id="1-Gobal-Setting"><a href="#1-Gobal-Setting" class="headerlink" title="1.Gobal Setting"></a>1.Gobal Setting</h2><p>首先，根据 <a href="https://pve.proxmox.com/wiki/PCI(e)_Passthrough">Proxmox VE 官方文档</a> 给出的 PCI-E 直通的前提条件，修改 Proxmox 主机中的 <code>/etc/default/grub</code> 来启用 <code>IOMMU</code> ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># If you change this file, run &#x27;update-grub&#x27; afterwards to update</span></span><br><span class="line"><span class="comment"># /boot/grub/grub.cfg.</span></span><br><span class="line"><span class="comment"># For full documentation of the options in this file, see:</span></span><br><span class="line"><span class="comment">#   info -f grub -n &#x27;Simple configuration&#x27;</span></span><br><span class="line"></span><br><span class="line">GRUB_DEFAULT=0</span><br><span class="line">GRUB_TIMEOUT=5</span><br><span class="line">GRUB_DISTRIBUTOR=<span class="string">&quot;Proxmox Virtual Environment&quot;</span></span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">&quot;quiet&quot;</span></span><br><span class="line">GRUB_CMDLINE_LINUX=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable os-prober, it might add menu entries for each guest</span></span><br><span class="line">GRUB_DISABLE_OS_PROBER=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment to enable BadRAM filtering, modify to suit your needs</span></span><br><span class="line"><span class="comment"># This works with Linux (no patch required) and with any kernel that obtains</span></span><br><span class="line"><span class="comment"># the memory map information from GRUB (GNU Mach, kernel of FreeBSD ...)</span></span><br><span class="line"><span class="comment">#GRUB_BADRAM=&quot;0x01234567,0xfefefefe,0x89abcdef,0xefefefef&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment to disable graphical terminal (grub-pc only)</span></span><br><span class="line"><span class="comment">#GRUB_TERMINAL=console</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The resolution used on graphical terminal</span></span><br><span class="line"><span class="comment"># note that you can use only modes which your graphic card supports via VBE</span></span><br><span class="line"><span class="comment"># you can see them in real GRUB with the command `vbeinfo&#x27;</span></span><br><span class="line"><span class="comment">#GRUB_GFXMODE=640x480</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment if you don&#x27;t want GRUB to pass &quot;root=UUID=xxx&quot; parameter to Linux</span></span><br><span class="line"><span class="comment">#GRUB_DISABLE_LINUX_UUID=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable generation of recovery mode menu entries</span></span><br><span class="line">GRUB_DISABLE_RECOVERY=<span class="string">&quot;true&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment to get a beep at grub start</span></span><br><span class="line"><span class="comment">#GRUB_INIT_TUNE=&quot;480 440 1&quot;</span></span><br></pre></td></tr></table></figure>

<p>将第 9 行的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">&quot;quiet&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果你是 Intel CPU 改为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">&quot;quiet intel_iommu=on&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果你是 AMD YES 的话，改为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">&quot;quiet amd_iommu=on&quot;</span></span><br></pre></td></tr></table></figure>

<p>保存之后执行以下命令来进行更新：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure>

<p>再将下面的添加到 <code>/etc/modules</code> 中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vfio</span><br><span class="line">vfio_iommu_type1</span><br><span class="line">vfio_pci</span><br><span class="line">vfio_virqfd</span><br></pre></td></tr></table></figure>

<p>执行以下命令来刷新 <code>initramfs</code> ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-initramfs -u -k all</span><br></pre></td></tr></table></figure>

<p>重启 Proxmox 主机，再执行以下命令来验证是否成功开启 <code>IOMMU</code> ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dmesg | grep -e DMAR -e IOMMU -e AMD-Vi</span><br></pre></td></tr></table></figure>

<p>返回类似如下的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[    0.025301] ACPI: DMAR 0x000000007BFE6000 0000B0 (v01 HPE    Server   00000001 1590 00000001)</span><br><span class="line">[    0.061429] DMAR: IOMMU enabled</span><br><span class="line">[    0.116477] DMAR: Host address width 39</span><br><span class="line">[    0.116478] DMAR: DRHD base: 0x000000fed91000 flags: 0x1</span><br><span class="line">[    0.116481] DMAR: dmar0: reg_base_addr fed91000 ver 1:0 cap d2008c40660462 ecap f050da</span><br><span class="line">[    0.116482] DMAR: RMRR base: 0x000000799d7000 end: 0x000000799f6fff</span><br><span class="line">[    0.116482] DMAR: RMRR base: 0x000000799c6000 end: 0x000000799c6fff</span><br><span class="line">[    0.116483] DMAR-IR: IOAPIC id 2 under DRHD base  0xfed91000 IOMMU 0</span><br><span class="line">[    0.116484] DMAR-IR: HPET id 0 under DRHD base 0xfed91000</span><br><span class="line">[    0.116484] DMAR-IR: Queued invalidation will be enabled to support x2apic and Intr-remapping.</span><br><span class="line">[    0.118014] DMAR-IR: Enabled IRQ remapping in x2apic mode</span><br><span class="line">[    0.593568] DMAR: No ATSR found</span><br><span class="line">[    0.593593] DMAR: dmar0: Using Queued invalidation</span><br><span class="line">[    0.595251] DMAR: Intel(R) Virtualization Technology for Directed I&#x2F;O</span><br></pre></td></tr></table></figure>

<p>其中 第 2 行，<code>IOMMU enable</code> 则证明启用成功</p>
<h2 id="2-GPU-Passthrough"><a href="#2-GPU-Passthrough" class="headerlink" title="2.GPU Passthrough"></a>2.GPU Passthrough</h2><p>通过在 Proxmox 主机上执行如下命令来获取 GPU 的 ID：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lspci -nn</span><br></pre></td></tr></table></figure>

<p>输出如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00:00.0 Host bridge [0600]: Intel Corporation Device [8086:3e33] (rev 07)</span><br><span class="line">00:01.0 PCI bridge [0604]: Intel Corporation Skylake PCIe Controller (x16) [8086:1901] (rev 07)</span><br><span class="line">00:12.0 Signal processing controller [1180]: Intel Corporation Cannon Lake PCH Thermal Controller [8086:a379] (rev 10)</span><br><span class="line">00:14.0 USB controller [0c03]: Intel Corporation Cannon Lake PCH USB 3.1 xHCI Host Controller [8086:a36d] (rev 10)</span><br><span class="line">00:14.2 RAM memory [0500]: Intel Corporation Cannon Lake PCH Shared SRAM [8086:a36f] (rev 10)</span><br><span class="line">00:16.0 Communication controller [0780]: Intel Corporation Cannon Lake PCH HECI Controller [8086:a360] (rev 10)</span><br><span class="line">00:16.4 Communication controller [0780]: Intel Corporation Device [8086:a364] (rev 10)</span><br><span class="line">00:17.0 SATA controller [0106]: Intel Corporation Cannon Lake PCH SATA AHCI Controller [8086:a352] (rev 10)</span><br><span class="line">00:1b.0 PCI bridge [0604]: Intel Corporation Cannon Lake PCH PCI Express Root Port [8086:a32c] (rev f0)</span><br><span class="line">00:1c.0 PCI bridge [0604]: Intel Corporation Cannon Lake PCH PCI Express Root Port [8086:a338] (rev f0)</span><br><span class="line">00:1d.0 PCI bridge [0604]: Intel Corporation Cannon Lake PCH PCI Express Root Port [8086:a330] (rev f0)</span><br><span class="line">00:1d.1 PCI bridge [0604]: Intel Corporation Cannon Lake PCH PCI Express Root Port [8086:a331] (rev f0)</span><br><span class="line">00:1d.2 PCI bridge [0604]: Intel Corporation Cannon Lake PCH PCI Express Root Port [8086:a332] (rev f0)</span><br><span class="line">00:1d.3 PCI bridge [0604]: Intel Corporation Cannon Lake PCH PCI Express Root Port [8086:a333] (rev f0)</span><br><span class="line">00:1f.0 ISA bridge [0601]: Intel Corporation Device [8086:a30a] (rev 10)</span><br><span class="line">00:1f.5 Serial bus controller [0c80]: Intel Corporation Cannon Lake PCH SPI Controller [8086:a324] (rev 10)</span><br><span class="line">01:00.0 System peripheral [0880]: Hewlett-Packard Company Integrated Lights-Out Standard Slave Instrumentation &amp; System Support [103c:3306] (rev 07)</span><br><span class="line">01:00.1 VGA compatible controller [0300]: Matrox Electronics Systems Ltd. MGA G200eH3 [102b:0538] (rev 02)</span><br><span class="line">01:00.2 System peripheral [0880]: Hewlett-Packard Company Integrated Lights-Out Standard Management Processor Support and Messaging [103c:3307] (rev 07)</span><br><span class="line">01:00.4 USB controller [0c03]: Hewlett-Packard Company iLO5 Virtual USB Controller [103c:22f6]</span><br><span class="line">02:00.0 Ethernet controller [0200]: Intel Corporation I350 Gigabit Network Connection [8086:1521] (rev 01)</span><br><span class="line">02:00.1 Ethernet controller [0200]: Intel Corporation I350 Gigabit Network Connection [8086:1521] (rev 01)</span><br><span class="line">02:00.2 Ethernet controller [0200]: Intel Corporation I350 Gigabit Network Connection [8086:1521] (rev 01)</span><br><span class="line">02:00.3 Ethernet controller [0200]: Intel Corporation I350 Gigabit Network Connection [8086:1521] (rev 01)</span><br><span class="line">07:00.0 VGA compatible controller [0300]: NVIDIA Corporation GP108 [10de:1d01] (rev a1)</span><br><span class="line">07:00.1 Audio device [0403]: NVIDIA Corporation GP108 High Definition Audio Controller [10de:0fb8] (rev a1)</span><br></pre></td></tr></table></figure>

<p>最后两行是我的显卡，记下他们的 ID：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">07:00.0 [10de:1d01]</span><br><span class="line">07:00.1 [10de:0fb8]</span><br></pre></td></tr></table></figure>

<p>再接着，在 <code>/etc/modprobe.d</code> 中创建 <code>vfio.conf</code> 文件，将以下内容写到里面：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">options vfio-pci ids&#x3D;10de:1d01,10de:0fb8 disable-vga&#x3D;1</span><br></pre></td></tr></table></figure>

<p>其中 ids 后面的内容是我前面记下的 GPU 的 ID，用 <code>,</code> 号分隔</p>
<p>再在同目录下新建一个 <code>blacklist.conf</code> 写入如下内容来保证 GPU 可以自由绑定而不会因为被 Proxmox 主机占用而出错，其中 <code>radeon</code> 是 A卡的驱动，<code>nouveau</code> 是自带的N卡驱动，就在这里连 A卡驱动一起给 ban 了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blacklist radeon</span><br><span class="line">blacklist nouveau</span><br><span class="line">blacklist nvidia</span><br></pre></td></tr></table></figure>

<p>再执行以下命令来刷新 <code>initramfs</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-initramfs -u -k all</span><br></pre></td></tr></table></figure>

<p>执行之后再重启 Proxmox 主机，重启完成之后，再执行如下命令验证：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lspci -nnk</span><br></pre></td></tr></table></figure>

<p>输出类似如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">07:00.0 VGA compatible controller [0300]: NVIDIA Corporation GP108 [10de:1d01] (rev a1)</span><br><span class="line">        Subsystem: Gigabyte Technology Co., Ltd GP108 [GeForce GT 1030] [1458:375c]</span><br><span class="line">        Kernel driver in use: vfio-pci</span><br><span class="line">        Kernel modules: nvidiafb, nouveau</span><br><span class="line">07:00.1 Audio device [0403]: NVIDIA Corporation GP108 High Definition Audio Controller [10de:0fb8] (rev a1)</span><br><span class="line">        Subsystem: Gigabyte Technology Co., Ltd GP108 High Definition Audio Controller [1458:375c]</span><br><span class="line">        Kernel driver in use: vfio-pci</span><br><span class="line">        Kernel modules: snd_hda_intel</span><br></pre></td></tr></table></figure>

<p>其中第 4 行与 第 8 行显示为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Kernel driver in use: vfio-pci</span><br></pre></td></tr></table></figure>

<p>则证明显卡直通成功了</p>
<h2 id="3-配置虚拟机"><a href="#3-配置虚拟机" class="headerlink" title="3.配置虚拟机"></a>3.配置虚拟机</h2><p>这里以 <strong>Ubuntu Server 18.04 LTS</strong> 为例：</p>
<p><img src="/images/articles/proxmox-ve-ubuntu-nvidia-passthrough/20200731_111152.webp" alt="创建"></p>
<p><img src="/images/articles/proxmox-ve-ubuntu-nvidia-passthrough/20200731_111236.webp" alt="设置镜像"></p>
<p>这里要注意的是 BIOS 要设置为 <strong>OVMF(UEFI)</strong> 至于是否要添加 EFI 磁盘，有什么影响我还不确定，但是我是添加了，还有就是 机器要设置为 <strong>q35</strong></p>
<p><img src="/images/articles/proxmox-ve-ubuntu-nvidia-passthrough/20200731_111405.webp" alt="系统设置"></p>
<p><img src="/images/articles/proxmox-ve-ubuntu-nvidia-passthrough/20200731_111724.webp" alt="硬盘设置"></p>
<p><img src="/images/articles/proxmox-ve-ubuntu-nvidia-passthrough/20200731_111759.webp" alt="设置CPU"></p>
<p><img src="/images/articles/proxmox-ve-ubuntu-nvidia-passthrough/20200731_111834.webp" alt="设置内存"></p>
<p><img src="/images/articles/proxmox-ve-ubuntu-nvidia-passthrough/20200731_111940.webp" alt="设置网络"></p>
<p><img src="/images/articles/proxmox-ve-ubuntu-nvidia-passthrough/20200731_112004.webp" alt="总设置"></p>
<p>在创建完之后，先不要急着启动，找到侧边栏的 <strong>硬件</strong> 选项：</p>
<p><img src="/images/articles/proxmox-ve-ubuntu-nvidia-passthrough/20200731_141610.webp" alt="添加 PCI-E 硬件"></p>
<p>再选中 <strong>显示</strong> 这一行，点击编辑，修改为 <strong>SPICE</strong> ：</p>
<p><img src="/images/articles/proxmox-ve-ubuntu-nvidia-passthrough/20200731_142041.webp" alt="编辑显存为SPICE"></p>
<p>最后修改完的设置应该为：</p>
<p><img src="/images/articles/proxmox-ve-ubuntu-nvidia-passthrough/20200731_142903.webp" alt="总配置"></p>
<p>然后再去启动虚拟机。</p>
<h2 id="4-Ubuntu-安装显卡驱动"><a href="#4-Ubuntu-安装显卡驱动" class="headerlink" title="4.Ubuntu 安装显卡驱动"></a>4.Ubuntu 安装显卡驱动</h2><p>通过 VNC 安装完系统之后，执行以下命令来安装系统更新：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update &amp;&amp; apt upgrade -y</span><br></pre></td></tr></table></figure>

<p>再安装 <strong>ubuntu-drivers-common</strong> 来安装驱动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install ubuntu-drivers-common</span><br></pre></td></tr></table></figure>

<p>ubuntu-drivers 安装完后再执行以下命令来自动安装驱动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu-drivers autoinstall</span><br></pre></td></tr></table></figure>

<p>这个驱动安装完后执行如下命令来验证：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure>

<p>如果报错，类似：</p>
<p><strong>NVIDIA-SMI has failed because it couldn’t communicate with the NVIDIA driver</strong></p>
<p>则再执行如下命令安装 cuda toolkit：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install nvidia-cuda-toolkit</span><br></pre></td></tr></table></figure>

<p>安装完成后再执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<p><img src="/images/articles/proxmox-ve-ubuntu-nvidia-passthrough/20200731_143853.webp"></p>
<p>则成功直通</p>
]]></content>
      <categories>
        <category>Microserver Gen 10 Plus</category>
      </categories>
      <tags>
        <tag>Proxmox VE</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 或 Debian 开启 BBR</title>
    <url>/articles/ubuntu-debian-bbr/</url>
    <content><![CDATA[<p>需要 Linux 内核 4.9 及以上版本</p>
<h3 id="1-修改系统变量"><a href="#1-修改系统变量" class="headerlink" title="1.修改系统变量"></a>1.修改系统变量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.core.default_qdisc=fq&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.ipv4.tcp_congestion_control=bbr&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure>

<h3 id="2-保存生效"><a href="#2-保存生效" class="headerlink" title="2.保存生效"></a>2.保存生效</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<h3 id="3-查看是否已经开启"><a href="#3-查看是否已经开启" class="headerlink" title="3.查看是否已经开启"></a>3.查看是否已经开启</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure>

<p>如输出如下，含有 <code>bbr</code> 即可，无需在意顺序，则证明已开启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net.ipv4.tcp_available_congestion_control = reno cubic bbr</span><br></pre></td></tr></table></figure>

<h3 id="4-查看BBR是否启动"><a href="#4-查看BBR是否启动" class="headerlink" title="4.查看BBR是否启动"></a>4.查看BBR是否启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure>

<p>显示以下即启动成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tcp_bbr                20480  20</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 或 Debian 在 Nginx 下使用 fail2ban 阻止恶意扫描</title>
    <url>/articles/ubuntu-debian-fail2ban-nginx/</url>
    <content><![CDATA[<p>在 <code>/etc/fail2ban/filter.d</code> 下新建 <code>nginx-cc.conf</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch /etc/fail2ban/filter.d/nginx-cc.conf</span><br></pre></td></tr></table></figure>

<p>输入：</p>
<figure class="highlight bash"><figcaption><span>nginx-cc.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">[Definition]</span><br><span class="line">failregex = ^&lt;HOST&gt; \- \S+ \[\] \&quot;.*\&quot; (400|404|444) .+$</span><br><span class="line">ignoreregex =.*(jpg|png)</span><br></pre></td></tr></table></figure>

<p>然后在 <code>/etc/fail2ban/jail.d/</code> 的 <code>defaults-debian.conf</code> 中加入如下几行：</p>
<figure class="highlight bash"><figcaption><span>defaults-debian.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">[nginx-botsearch]</span><br><span class="line">enabled = <span class="literal">true</span></span><br><span class="line">[nginx-cc]</span><br><span class="line">enabled = <span class="literal">true</span></span><br><span class="line">filter  = nginx-cc</span><br><span class="line">logpath = %(nginx_access_log)s</span><br><span class="line">port    = http,https</span><br></pre></td></tr></table></figure>

<p>unban：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fail2ban-client <span class="built_in">set</span> jailname unbanip ipaddress</span><br></pre></td></tr></table></figure>

<p>规则校验：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fail2ban-regex /var/<span class="built_in">log</span>/nginx/*.access.log /etc/fail2ban/filter.d/nginx-cc.conf</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>fail2ban</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 下使用 Nginx + MySQL 搭建 Wordpress</title>
    <url>/articles/ubuntu-nginx-mysql-wordpress/</url>
    <content><![CDATA[<p><strong>以 Ubuntu 20.04 为例，且假设你已获取到 root 权限或者使用的是 root 账号，Wordpress 与 MySQL 安装在同一台服务器上</strong></p>
<h3 id="1-Wordpress"><a href="#1-Wordpress" class="headerlink" title="1. Wordpress"></a>1. Wordpress</h3><p><strong>如果你已经使用其他工具下载好了 Wordpress 则可以使用 sftp 工具或者任意工具上传到服务器 /var/www 文件夹下，跳过1.1</strong></p>
<h4 id="1-1-下载"><a href="#1-1-下载" class="headerlink" title="1.1 下载"></a>1.1 下载</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://cn.wordpress.org/latest-zh_CN.tar.gz -o /var/www/wordpress.tar.gz</span><br></pre></td></tr></table></figure>

<p>该命令是将 <strong>中文版</strong> 的 Wordpress 下载到路径 /var/www 中，名字为 wordpress.tar.gz， 如果提示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash: curl: <span class="built_in">command</span> not found.</span><br></pre></td></tr></table></figure>

<p>则运行如下命令后再运行第一条命令下载 Wordpress：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install curl</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="1-2-解压及修改用户组权限"><a href="#1-2-解压及修改用户组权限" class="headerlink" title="1.2 解压及修改用户组权限"></a>1.2 解压及修改用户组权限</h4><p>首先进入 <code>/var/www</code> 文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www</span><br></pre></td></tr></table></figure>

<p>解压刚刚下载的 wordpress.tar.gz 到当前文件夹中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf wordpress.tar.gz</span><br></pre></td></tr></table></figure>

<p>修改文件夹用户组权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown -R www-data:www-data /var/www/wordpress</span><br></pre></td></tr></table></figure>


<h3 id="2-Nginx"><a href="#2-Nginx" class="headerlink" title="2. Nginx"></a>2. Nginx</h3><h4 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install nginx -y</span><br></pre></td></tr></table></figure>

<p>当上面命令执行完，访问你服务器的 ip 出现以下则证明安装成功</p>
<blockquote>
<p><strong>Welcome to nginx!</strong></p>
<p>If you see this page, the nginx web server is successfully installed and working. Further configuration is required.</p>
<p>For online documentation and support please refer to <a href="http://nginx.org/">nginx.org</a>.<br>Commercial support is available at <a href="http://nginx.com/">nginx.com</a>.</p>
<p><em>Thank you for using nginx.</em></p>
</blockquote>
<p>如果发现访问超时，请检测是否因为 防火墙(ufw) 或者 服务器提供商 关闭了80端口</p>
<h4 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h4><p>首先复制一份默认配置，将下面命令中的 <code>&#123;your-domain&#125;</code> 更换为你自己的域名或者别的名字</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /etc/nginx/sites-available/default /etc/nginx/sites-available/&#123;your-domain&#125;.conf</span><br></pre></td></tr></table></figure>

<p>接着修改这份配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/nginx/sites-available/&#123;your-domain&#125;.conf</span><br></pre></td></tr></table></figure>

<p>如果提示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash: vi: <span class="built_in">command</span> not found.</span><br></pre></td></tr></table></figure>

<p>则使用如下命令安装 Vim，安装完成后再接着使用上面的命令修改配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install vim</span><br></pre></td></tr></table></figure>

<p>将配置修改成如下，如果没有使用域名则无需修改 <code>server_name</code> 字段</p>
<figure class="highlight nginx"><figcaption><span>&#123;your-domain&#125;.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">root</span> /var/www/wordpress;</span><br><span class="line">  <span class="attribute">index</span> index.php;</span><br><span class="line"></span><br><span class="line">  server_name &#123;you-domain&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">try_files</span> $uri $uri/ =<span class="number">404</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">    <span class="attribute">include</span> snippets/fastcgi-php.conf;</span><br><span class="line">    <span class="attribute">fastcgi_pass</span> unix:/var/run/php/php7.4-fpm.sock;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 <code>fastcgi_pass</code> 这一项中的 <code>php7.4-fpm.sock</code> 需要通过如下命令安装，系统不同，安装上的版本不同，记得<strong>替换成你们对应的版本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install php-fpm</span><br></pre></td></tr></table></figure>

<p>删除正在使用的默认的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm /etc/nginx/sites-enabled/default</span><br></pre></td></tr></table></figure>

<p>将修改好的配置加入到正在使用的配置中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -s /etc/nginx/sites-available/&#123;you-domain&#125;.conf /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure>

<p>测试配置是否正确</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure>

<p>如果出现如下则代表配置成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure>

<p>重载配置以生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>

<p>此时去浏览器访问你的 ip 已经会出现如下提示：</p>
<blockquote>
<p>您的PHP似乎没有安装运行WordPress所必需的MySQL扩展。</p>
</blockquote>
<p>则还需要安装 <code>php-mysql</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install php-mysql</span><br></pre></td></tr></table></figure>

<p>此时距离完成就剩下安装数据库了</p>
<h3 id="3-Mysql"><a href="#3-Mysql" class="headerlink" title="3. Mysql"></a>3. Mysql</h3><h4 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1 安装"></a>3.1 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install mysql-server</span><br></pre></td></tr></table></figure>

<p>安装完成后输入如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>

<p>如果显示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Securing the MySQL server deployment.</span><br><span class="line"></span><br><span class="line">Enter password <span class="keyword">for</span> user root:</span><br></pre></td></tr></table></figure>

<p>如果在安装的时候设置过 <code>root</code> 的密码，则输入密码后再 <code>Enter</code>，否则直接 <code>Enter</code> 跳过</p>
<p>接着：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">VALIDATE PASSWORD COMPONENT can be used to <span class="built_in">test</span> passwords</span><br><span class="line">and improve security. It checks the strength of password</span><br><span class="line">and allows the users to <span class="built_in">set</span> only those passwords <span class="built_in">which</span> are</span><br><span class="line">secure enough. Would you like to setup VALIDATE PASSWORD component?</span><br><span class="line"></span><br><span class="line">Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No:</span><br></pre></td></tr></table></figure>

<p>输入 <code>y</code> 然后 <code>Enter</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">There are three levels of password validation policy:</span><br><span class="line"></span><br><span class="line">LOW    Length &gt;= 8</span><br><span class="line">MEDIUM Length &gt;= 8, numeric, mixed <span class="keyword">case</span>, and special characters</span><br><span class="line">STRONG Length &gt;= 8, numeric, mixed <span class="keyword">case</span>, special characters and dictionary                  file</span><br><span class="line"></span><br><span class="line">Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG:</span><br></pre></td></tr></table></figure>

<p>这里是设置密码强度校验，根据个人的密码强度选择即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">By default, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to <span class="built_in">log</span> into MySQL without having to have</span><br><span class="line">a user account created <span class="keyword">for</span> them. This is intended only <span class="keyword">for</span></span><br><span class="line">testing, and to make the installation go a bit smoother.</span><br><span class="line">You should remove them before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) :</span><br></pre></td></tr></table></figure>

<p>删除匿名用户，输入 <code>y</code> 然后 <code>Enter</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Success.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed to connect from</span><br><span class="line"><span class="string">&#x27;localhost&#x27;</span>. This ensures that someone cannot guess at</span><br><span class="line">the root password from the network.</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) :</span><br></pre></td></tr></table></figure>

<p>是否禁止 <code>root</code> 远程登录，一般选是，输入 <code>y</code> 然后 <code>Enter</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Success.</span><br><span class="line"></span><br><span class="line">By default, MySQL comes with a database named <span class="string">&#x27;test&#x27;</span> that</span><br><span class="line">anyone can access. This is also intended only <span class="keyword">for</span> testing,</span><br><span class="line">and should be removed before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Remove <span class="built_in">test</span> database and access to it? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) :</span><br></pre></td></tr></table></figure>

<p>是否删除测试数据库，选是，输入 <code>y</code> 然后 <code>Enter</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Success.</span><br><span class="line"></span><br><span class="line"> - Removing privileges on <span class="built_in">test</span> database...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">Reloading the privilege tables will ensure that all changes</span><br><span class="line">made so far will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) :</span><br></pre></td></tr></table></figure>

<p>是否立即重新加载权限，选是，输入 <code>y</code> 然后 <code>Enter</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Success.</span><br><span class="line"></span><br><span class="line">All <span class="keyword">done</span>!</span><br></pre></td></tr></table></figure>

<p>数据库初始化设置完成，输入以下命令进入数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>

<p>提示要输入密码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter password:</span><br></pre></td></tr></table></figure>

<p>输入前面设置的 <code>root</code> 的密码，然后 <code>Enter</code>，如果出现如下则证明成功进入数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 10</span><br><span class="line">Server version: 8.0.23-0ubuntu0.20.04.1 (Ubuntu)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2021, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>

<p>然后创建数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> wordpress <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">DEFAULT</span> <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_general_ci;</span><br></pre></td></tr></table></figure>

<p>提示如下则证明数据库创建成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Query OK, 1 row affected (0.12 sec)</span><br></pre></td></tr></table></figure>

<p>创建一个数据库用户 <code>wordpress</code> 用来操作 上面创建的 <code>wordpress</code> 数据库，修改 <code>&#123;password&#125;</code> 为你自己的密码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;wordpress&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;&#123;password&#125;&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>给用户 <code>wordpress</code> 授予 数据库 <code>wordpress</code> 的所有权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> wordpress.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;wordpress&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br></pre></td></tr></table></figure>

<p>刷新权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<p>退出数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<h3 id="4-End"><a href="#4-End" class="headerlink" title="4. End"></a>4. End</h3><p>回到浏览器，刷新，点击 <strong>现在就开始！</strong> </p>
<p>在下一个界面中，数据库名与用户名无需修改，只需要填入刚才设置的数据库密码点击提交即可</p>
<p>再接下来的步骤交给著名的WordPress五分钟安装程序</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Ubuntu</tag>
        <tag>Nginx</tag>
        <tag>Wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 中赋值表达式的返回值</title>
    <url>/articles/value-of-java-assignment-expression/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>写代码的时候脑子里想着</p>
<blockquote>
<p>如果 flag = true 则 do something …</p>
</blockquote>
<p>于是手上跟着敲出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (flag = <span class="keyword">true</span>) &#123;</span><br><span class="line">    <span class="comment">// do something ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译器没有报错，当时思想走神也丝毫没有发觉这是一段弱智代码，调试的时候发现 if 里的语句每次都执行了，觉得不太对劲，然而仍然没有发现这段弱智代码有问题，本着格物致知的精神格了几分钟才发现这段代码应该是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">    <span class="comment">// do something ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>瞬间觉得自己宛如智障</p>
<span id="more"></span>

<h1 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h1><p>google 了一下 java 赋值表达式，才发现赋值表达式也是有返回值的，突然就想起：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>((len = in.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这点在 <a href="https://docs.oracle.com/javase/specs/jls/se13/html/jls-15.html#jls-15.26">Oracle Java 文档</a> 中有描述</p>
<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>赋值表达式的返回值是表达式中右边的值，<code>evaluation order</code> 是从左到右也就是说：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> j = (i = <span class="number">3</span>) * i;</span><br></pre></td></tr></table></figure>

<p>i 会先被赋值为 3，再乘以本身，所以 j = 9</p>
<p>于是我当时写下的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (flag = <span class="keyword">true</span>) &#123;</span><br><span class="line">    <span class="comment">// do something ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>if 表达式中的 flag 每次都会被我设为 true 且返回值也是 boolean 类型所以编译器不会报错，然后进入 if 中执行</p>
<p>这就是这次弱智事情的总结</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>在杭州的这4年</title>
    <url>/articles/4-years-in-Hangzhou/</url>
    <content><![CDATA[<article class="message is-success"><div class="message-body">
<p>“Life is a f**king movie，人生如戏啊，靓仔”</p>
</div></article>

<span id="more"></span>

<h1 id="1-2017"><a href="#1-2017" class="headerlink" title="1. 2017"></a>1. 2017</h1><p>　　4年前那个夏天，我大四实习的时候本来是在一所公立学校里面当外聘老师，但是觉得每天坐在这张桌子面前实在是无趣，且一眼就能看到10年后我是什么样子，我觉得这样的人生实在是太平淡了，我接受不了这样的生活，所以我就从学校离职了。</p>
<p>　　大学刚毕业的我跟驴子回到衡阳之后两个人在外面吃饭，聊着聊着觉得在衡阳实在是找不到工作，于是伟大的头脑总是不谋而合，脑子一拍跟我驴两个人就一个行李箱一个包带着3000块钱从衡阳来到杭州。</p>
<p><img src="/images/articles/4-years-in-Hangzhou/20170718_151905_1920x1080.webp" alt="机票"></p>
<p>　　落地之后跟我驴决定先找个宾馆落脚，接着再开始找地方住，最后再找工作。</p>
<p>　　那个时候遇到了个套路，先去中介公司交中介费，然后再带你看房，不满意中介费也没得退，当时不懂这个套路，跟我驴交了钱，然后一个“黑”中介：常年带客户看房导致晒得黑不溜秋的，带我们去各种城中村看房。</p>
<p>　　我当时还在想赚个钱不容易人都晒成这鬼样了，带我们看了几套农民房，我们都不满意，最后去了萧山杭发厂旁边的农民房，那会儿跟驴子租的宾馆也到期了，然后也看了一天房，不知道怎么想的，就先签了下来，那地方绕了很多条小路，为了防止自己走的时候找不到路所以拍了一堆照片记录一下怎么走，说是房子不如说是4面砖墙垒起来的，上面再盖几片瓦就当屋顶了，一个木板床啥也没有。</p>
<p><img src="/images/articles/4-years-in-Hangzhou/20170721_141538_1920x1080.webp" alt="在这么一个地方睡了一晚上"></p>
<p>　　当天晚上我跟驴子两个人就着衣服拿包当枕头睡了一晚上，第二天早上爬起来就说这厕所不是人待的地方要另外找房子，第二天下午去闲林看了房子，然后当天从萧山搬去闲林，我驴当时发出了<em>“我XXX，今天晚上就算是搬到10点，也要从这个厕所搬出去”</em>的宣言，于是晚上搬到11点多总算搬完，这下在杭州总算是有个落脚的地方，后面想起来这中介费真好赚，亏我当时还心善觉得晒得这么黑这个钱真难赚，分分钟被打脸。</p>
<p><img src="/images/articles/4-years-in-Hangzhou/20180323_073629_1920x1080.webp" alt="杭州的第一个落脚点"></p>
<p>　　搬到闲林之后其实环境很不错，就是太远了，那个时候也年轻，还没意识到问题的严重性，直到我投简历投到了拱墅区：去了一家创业公司。</p>
<p>　　之后开始每天早上5.30起床赶第一趟B4从闲富路北口到汽车西站，再坐91路从汽车西站坐到祥园路杭行路口的生活，来回5个多小时，有时候下班的时候在路边等车，蹲在马路边，由于那时候还有女朋友，比我小一届，没有毕业，所以看到一对对的情侣在路灯下的影子越拉越长其实还挺羡慕的。</p>
<p>　　题外话就是当时还投了西溪创业园的腾讯，面试过了。但是我气不过大学的时候：腾讯秋招，我笔试过了，面试被刷了，春招的时候又投简历，笔试过了，因为大学是双非，面试资格都没有。我就说我得当<strong>腾讯得不到的男人</strong>，而且腾讯必定加班，<strong>我讨厌加班，我拒绝加班。</strong>于是HR给我打了3次电话我都给拒绝了，现在想起来真是脑子进了水了。</p>
<p>　　当时那个创业公司嘛，有两个老板：一个男老板，唱红脸、一个女老板，唱白脸；给我的感觉就是男老板人挺好的也挺想做成这个事，就是没啥权力，而女老板就有点啥也不懂但是喜欢外行指挥内行这种的。</p>
<p>　　其实整个公司氛围并不怎么样：只有一个挂名的CTO，所以当时整个技术部门负责人扔我头上了，剩下的几个技术还是我当时面试进来的，没需求文档没后台接口啥也没有，然后当时还搬场地，新场地装修我们几个还得去<strong>扛水泥，当小工捡装修垃圾</strong>。其他几个部门嘛勾心斗角的，每天都是没有硝烟的战争。</p>
<p><img src="/images/articles/4-years-in-Hangzhou/20170925_960x540.webp" alt="新场地的工位"></p>
<p>　　我一个臭写代码的，能牵扯到多少呢，而且男老板人还挺不错的，我这么想着就在这个公司做了4个月了，然后出现了创业公司的通病：拖欠工资。<strong>连续3个月每个月只发了我1600块钱工资</strong>，我那善良的本质还影响着我没跑路，想着把这事做完了再跑。其实现在看来没跑路我也是脑子进水了，真是人傻瞎自信。</p>
<p>　　还有个脑子进水的点就是拖欠我3个月工资居然还能花50万赞助当时的健康产业峰会然后去杭州G20会馆租场地开年会，我居然还没想着要钱然后赶紧跑路：</p>
<p><img src="/images/articles/4-years-in-Hangzhou/20180120_091940_1920x1080.webp" alt="2018浙江国际健康产业领袖峰会"></p>
<p>　　我记得17年的冬天杭州下了很大的雪，早上去上班的时候听他们说老板跑去西湖看雪去了，我就在想啥时候我也能下雪的时候跑西湖去看雪，再加上南方人本来就没见过什么雪，于是在那天早上等车的时候在汽车西站拍了如下这张照片：</p>
<p><img src="/images/articles/4-years-in-Hangzhou/20180126_082258_1920x1080.webp" alt="2017年的冬天"></p>
<p>　　嘛，这半年就这么过去了，<strong>从身无分文打工打到负债累累</strong>。</p>
<h1 id="2-2018"><a href="#2-2018" class="headerlink" title="2. 2018"></a>2. 2018</h1><p>　　元旦那天晚上跟我朋友他们吃完晚饭之后回去的路上分的手，当时坐在B4的末班车上，就我一个人了往闲林那边走。原因嘛她妈想她呆在老家，呆在父母身边。</p>
<p>　　年过完回杭州正月初九就偷偷摸摸去了趟洛阳，由于之前把我的联系方式全拉黑了，所以落地办了张手机卡，打电话过去以为能当面谈一谈，结果一面都没见着，算是感动自己，无奈只能在那边她家楼下泡了4天网吧，回来的时候会员的钱都还没上完。现在想起来也是十分搞笑了，这种自己感动自己的事情真是，一辈子只做一回就够了，自己能笑自己二十年，倒是后悔泡了4天网吧怎么就没去白马寺跟龙门石窟看看。</p>
<p>　　回来上飞机之前关机卡一丢，这句号就给画上了。</p>
<p>　　到杭州落地之后从机场打车回闲林，路上从西湖旁边过，那是我来杭州这么久第一次看见西湖长什么样，以前同事一直都说“<em>就一大水池子</em>”，这水池子还挺好看的，清明的时候就跟公司里的朋友一起去了西湖玩，那算是我第一次逛西湖，在来杭州8个月之后：</p>
<p><img src="/images/articles/4-years-in-Hangzhou/20180422_153929_1920x1080.webp" alt="2018的清明"></p>
<p>　　3月份的时候我当时公司技术部门全体人员一商量，集体离职跑路了，<strong>继续下去只会越陷越深</strong>，跑完路之后。换了家公司，还是离之前公司没多远，还在拱墅区，就离谱，我也不知道怎么想的。</p>
<p>　　有天下班到家的时候在小区门口看到有人在卖多肉，瞬间少女心拉满，从此开始走上了养多肉的路：</p>
<p><img src="/images/articles/4-years-in-Hangzhou/20180324_151827_2222x1080.webp" alt="第一盆多肉 - 青丽"></p>
<p>　　有天下班回来看到我驴在桌子面前磨个什么东西，最后一问是我驴在勾搭的妹子不知道从哪看来的<em>玲珑骰子安红豆</em>，我驴淘宝买了原材料准备自己手磨，不是这里凹进去了就是那里磨歪了，于是我看我驴磨这玩意磨了差不多一个月（<del>貌似最后还是没追到</del>）（现在追到了）：</p>
<p><img src="/images/articles/4-years-in-Hangzhou/20180415_184242_1920x1080.webp" alt="我驴受够了爱情的苦"></p>
<p>　　5月份我振男儿子，因为被某前任网红在花光了他自己在深圳打拼攒下的钱随即分手之后又说出的一句“<em>又丑又没钱还不会穿衣服</em>” 触及到了灵魂，跑去西藏荡涤心灵，完事为了省钱坐了一天的绿皮火车到兰州再坐飞机到杭州我这来治愈心灵创伤，下飞机人失联我还以为又被杭州哪个网红勾走了直到他打电话告诉我是手机没电了。</p>
<p><img src="/images/articles/4-years-in-Hangzhou/20180509_204537_1920x1080.webp" alt="我振男儿子也受够了爱情的苦"></p>
<p>　　6月份，第二家公司因为这边场地到期了要搬去临平，太远了，我不打算跟着去，于是刚过了试用期就又得重新找工作。刚好这边房租也要到期了，就琢磨着重新找房子，每天花5个小时在通勤上实在是太痛苦了，而一开始跟我奔杭州的驴子却准备回长沙追求爱情。</p>
<p>　　去年王总<sup>大学室友</sup>也来杭州当时一直在天津出差现在跳槽不出差了，而且另外一个留级了的大学室友子健小友毕业之后也准备来杭州找找机会于是我就跟他俩开始了接下来的生活：</p>
<p><img src="/images/articles/4-years-in-Hangzhou/20180611_185938_2222x1080.webp" alt="子健小友来杭州之后带他去西湖玩"></p>
<p><img src="/images/articles/4-years-in-Hangzhou/20180618_181411_1920x1080.webp" alt="跟我子健小友还有王总&lt;sup&gt;大学室友&lt;/sup&gt;看房，最终成为第二个落脚点"></p>
<p>　　在第二家公司上班的时候，有件事令我印象挺深刻的：<strong>有天中午我下楼去吃饭，去了一家类似顺旺基这种的自己端菜的店子，排在我前面那个人，皮肤也是晒得黝黑，穿的衣服也很旧了，布满了油污，只端了一碟花菜，打了一份饭，然后我很好奇，一般都是一荤一素两个菜的，我清楚的看到当时结账是11块钱，然后他端着菜与饭，走到一个还没来得及收上一位食客剩菜的座位上时我就明白了将会发生什么，我当时心里挺惊讶的，我也是第一次遇到这种事情。</strong></p>
<p>　　这件事情让我深受触动，我可以联想出这个男人为了家庭过着怎样的生活，而心里的感觉就好比现在B站把贫穷地区的小学生一日三餐吃着洋芋十分开心和大城市的狗吃战斧牛排同时推送给你，这种强烈的违和感让我想起一句话：<em>狗彘食人食而不知检</em>。</p>
<p>　　当时我的月薪也只有6.5k，我想做些什么可我却什么都做不了，安慰着自己<em>“达则兼济天下，穷则独善其身”</em>，而我现在这样算达吗？相对于这个人我觉得有可能是算的，我也应该能做些什么了，但是现在的我依旧什么也没做，但是我又觉得我应该做点什么这种矛盾的心理，我认为我这是<strong>伪善</strong>。</p>
<p>　　入职第三家公司之前有个小插曲，就是我接受了另一家公司Offer，上班第一天，下班的时候拉着我开会开到晚上7.30，搞得我回到闲林快晚上10点了，我这脾气，第二天就跟HR说离职了，也算是创下了我个人最短离职时间记录。</p>
<p>　　端午之后入职的第三家公司，面试的时候面了我一个多小时，HR跟我是湖南老乡，入职之前有问过HR加不加班，她说从不加班，于是我接受了这份Offer，入职之后嘛，前两个礼拜 Android 的客户端还在外包手里还没交接，我每天到点就溜了，这家公司离我第二个落脚点只有2.5公里，每天上下班十分舒坦。</p>
<p>　　第三个星期，我发现我错了，外包的客户端交接，我负责 Review 一部分的代码，从那个时候起，我工作日就再也没有看见过杭州下午6点钟的太阳，我后面偷偷问人事，她说”<em>我说的是我们从不加班到点就走了，你们不一样</em>“。</p>
<p>　　后悔，实在是后悔，在哪不是加班，跑都跑不掉早知道初就去腾讯了。</p>
<p>　　好在同事这个后端是个沙雕，坐在我旁边，也姓王，我管他也叫王总<sup>沙雕后端</sup>，我老板姓苏，我们都叫他苏总，我刚入职那几个月，苏总喜欢在晚上加班的时候搬条椅子坐在我们两个中间，盯着我们两个写代码：</p>
<p><img src="/images/articles/4-years-in-Hangzhou/20180717_170725_1080x2222.webp" alt="就是这样"></p>
<p>　　一旦被苏总发现我俩代码有问题的地方：<em>“来来来你告诉我你为什么这么写”</em>，<em>“你在想些什么啊？”</em>，<em>“撒把米放键盘上母鸡都比你写得好吧？”</em>。我感觉我被喷完整个试用期，甚至担心这个样子下去能不能转正。</p>
<p>　　其实苏总人挺不错的，啥都会。我们第一个项目做的东南亚那块，有时差，我们服务器得半夜上线新版本，传个包就得几十分钟，一旦线上出错，又得回滚，然后排查问题，当场改了当场再次上线，当时更新频率比较频繁，两个星期一个版本，所以经常一搞就是深夜2-3点，王总<sup>沙雕后端</sup>那时已经困得跟沙雕一样了，代码都不知道怎么写了，再加上苏总坐在旁边喷，就完全懵逼状态，然后苏总就抢过键盘自己动手改，完事后晚上他开车送我们回去，在路上再告诉我们到底哪错了为什么不能这么写。</p>
<p>　　就这样边做着海外的项目，边跟苏总学，学了挺多有用的东西，这也是我之后在这家公司即使没给我涨工资我也一直做到了2021年的原因。</p>
<p>　　2018 的年底，跟以前公司一个玩得好的朋友陈总，还有王总<sup>大学室友</sup>一起去西湖旁边吃饭，吃完出来发现下雪了，就去湖边逛了逛，总算完成一半我2017年底说过的话：“下雪要去西湖看雪景”</p>
<p><img src="/images/articles/4-years-in-Hangzhou/20181230_183430_2222x1080.webp" alt="只完成一半是因为这是晚上，我想看白天的"></p>
<p>　　这一年又过去了。</p>
<h1 id="3-2019"><a href="#3-2019" class="headerlink" title="3. 2019"></a>3. 2019</h1><p>　　自从去年开始养多肉之后，就越养越多：</p>
<p><img src="/images/articles/4-years-in-Hangzhou/20190318_001249_2222x1080.webp" alt="冰山一角"></p>
<p>　　由于场地原因，我们办公区域楼上楼下的搬了好几次，最惨的一次是搬到公司的休闲区。</p>
<p><img src="/images/articles/4-years-in-Hangzhou/20190107_212002_2222x1080.webp" alt="王总&lt;sup&gt;沙雕后端&lt;/sup&gt;跪着写代码"></p>
<p>　　在这家公司每天只有无尽的加班，别的部门走完了而我们部门还在加班。部门的人也越来越多，一度达到20个人左右，但是在5月份之后就零零碎碎没什么活了。7月份的时候得知部门海外的项目16个月砸了300多万，入账不到10%，一波裁员转项目，部门整个办公区人全被裁员走光，开发就剩我跟王总<sup>沙雕后端</sup>两个人，好嘛，又回到了最初的样子。</p>
<p>　　接下来苏总又提出一个别的项目，探索方向，我跟王总<sup>沙雕后端</sup>又开始忙碌了起来。</p>
<p><img src="/images/articles/4-years-in-Hangzhou/20190606_190004_2222x1080.webp" alt="偶尔下班天还亮着"></p>
<p>　　忙了一个多月样子，项目赶出来了，然而种种原因，又无法上线，这个时候恰好国内发行部他们有一个项目，缺开发（<em>我们就差一个写代码的了</em>），然后把我跟王总<sup>沙雕后端</sup>安排去做他们的项目，他们跟我们部门不是同一块，于是把他们的一个后端扔过来了，于是乎：</p>
<p><img src="/images/articles/4-years-in-Hangzhou/20200109_224708_2222x1080.webp" alt="我们3个围观他写代码"></p>
<p>　　然而这个小伙子水平实在是有点差，苏总差不多每天 Review 他的代码都能把他喷得体无完肤，而且我们部门天天加班，他有点受不了，没过多久就离职了，但是他交接的时候留下来的代码让苏总说出来一句话：<em>“把他叫回来，说请他吃饭。”</em> 后面听说其他的原因就是：他之前坐在国内发行部那边，妹子多，气氛比较活跃，每天下午喝喝奶茶划划水，到点下班十分舒坦，坐到我们这块来之后，没人跟他说话气氛十分沉闷，每天到下班的点只能看着别人开溜觉得很痛苦，而且晚上要上线就要搞到很晚接受不了，只好离职。与他同时离职的还有他们部门的一个前端跟产品，至于为什么离职我听到的八卦又是另一个故事了。</p>
<p>　　在2019年的年底，我终于拿到了人生中第一笔年终奖，太难了，感动。而子健小友也因为在杭州呆了一年半始终无法找到一份满意的工作离开了杭州，回了老家。</p>
<h1 id="4-2020"><a href="#4-2020" class="headerlink" title="4. 2020"></a>4. 2020</h1><p>　　因为疫情的原因，这个年过得十分舒坦，我以为过年回来没带电脑就可以躲过一劫，没想到我老板回公司把电脑给我邮了过来，每天早上要钉钉参加晨会（其实晨会完我又躺下接着睡了），每天就是随便写写然后看看杭州这边疫情防控措施准不准我回小区，这也是我大学毕业之后第一次在家过的生日，后面到了2月18号样子得知可以回小区了，我就买了20号的高铁回杭州。</p>
<p>　　临走之前到高铁站过安检发现随身背着的包里多出一瓶可乐，我在家是不太能喝可乐的，我老爷子被当年可乐的谣言给刻下了精神烙印，看到我喝可乐就要说我，而我老太太虽然也不喜欢我喝可乐，但是我在家里有表现出过想喝可乐的意图，所以我老太太给我包里塞了一瓶早上出去买菜的时候顺带给我买的可乐。</p>
<p><img src="/images/articles/4-years-in-Hangzhou/20200220_134217_2222x1080.webp" alt="这瓶可乐后面喝完了瓶子我好久都舍不得扔"></p>
<p>　　回到杭州之后，后端王总<sup>沙雕后端</sup>是武汉人，那会儿还困在武汉无法回来，所以本来一部分由他做的工作就扔到我头上来了，其实挺多这种时候的，但是我做的工作从来没扔他头上，这就很烦，不过在做那些工作的时候我也学会了很多东西。</p>
<p>　　时间又一天天推进到5月，本来这边房租是到6月中旬的，但是不知道什么原因，房东不租了，让我们提前搬走，于是五一假期我跟王总<sup>大学室友</sup>两个人就开始找房子。其实我去年年底就打算今年回来之后跳槽的，在这边工作了差不多3年了，没涨过工资，虽然学到不少东西，但多多少少让人焦虑。</p>
<p>　　但是由于疫情的原因，再加上也没看到好的公司好的岗位，所以就暂时没有提离职，但是总归是要走的，之后又想往上城西湖或者滨江那块发展，所以最后我就搬往了江干区。</p>
<p><img src="/images/articles/4-years-in-Hangzhou/20210412_204425_2222x1080.webp" alt="离市民中心还挺近的"></p>
<p>　　谁知道这一年都没有离职，部门由于业务扩展的原因呢，人也越来越多。现在搬得比较远了，每天早上又得很早起床赶去上班，每天晚上下班之后赶回去又很晚。</p>
<p><img src="/images/articles/4-years-in-Hangzhou/20200522_190545_2222x1080.webp" alt="难得下班外面天还是亮的"></p>
<p>　　本来之前跟我振男儿子约好了国庆去西藏，但是我振男儿子飞了我鸽子，疫情的原因憋了许久，我又不想浪费这个国庆，想出去玩，脑子一拍就决定了一个人往云南走一圈，于是花了一天样子规划了大概的路线，订好了住宿与飞机票火车票，提前请了一个星期的年假，9月25号一大清早就坐飞机往昆明飞，落地再坐火车去大理。</p>
<p>　　第二天在苍山上，苏总给我打电话说项目的代码有些要改的，然后他又说算了他来改，最后我下山一看他给代码上写了 10 行 TODO，最后还是我来写，我后面回杭州到公司之后问了同事苏总看我代码有没有边看边骂，同事说没有，只有吐槽我的键盘好几个键位都被我按凹进去了我才长舒一口气，因为苏总已经很久没有 Review 过我跟王总<sup>沙雕后端</sup>的代码了，生怕被他看到什么写得跟*一样的代码然后被喷是一坨*。(整个项目都是我独立开发我扪心自问没往里面掺*)</p>
<p>　　在大理呆了4天，又起身前往丽江，晚上一个人在丽江古城大水车旁边的小龙坎吃火锅，服务员问我几个人，我冲她比了1根手指，她还不太相信，重复问了我一句一个人吗，我说是啊，一个人。这感觉简直太棒了，真的，一个人想走就走，想吃什么就吃什么。</p>
<p>　　时间再一晃过了两个月到年底了，我大学室友，睡我下铺的兄弟结婚，这是我们寝室第一个结婚的，我跟王总<sup>大学室友</sup>两个人赶大清早的飞机，飞往怀化，落地那边安排车来接，下午2点才到了他那，可是我们只有一天的假期，晚上的飞机又要走，于是只在那待了 4 个小时，晚饭都没吃上我就跟王总<sup>大学室友</sup>又赶往机场赶飞机回杭州。</p>
<p>　　小伙子结婚的对象不是他大学的那个女朋友。</p>
<p>　　他大一那会儿参加社团认识的那个妹子，那会儿为了追那个妹子，情人节的时候，大冬天的冷死人，喊几个室友站在南校到北校的路口上一人手上拿朵玫瑰花，假装追妹没追到把花送给他，剩下几个提前去北校樱花园里的小亭子里给他摆心形蜡烛，到时候快到了给点燃然后开溜，NM的情人节那会儿人都冷死湘潭那鬼地方风又大得要命蜡烛点个鬼燃，而且那会儿樱花园根本没樱花全光溜溜的树杈杈实在是不知道他怎么踩的点。</p>
<p>　　最后还是追到了，有次比较搞笑的是大半夜给子健小友打电话让他<sup>子健小友</sup>去女生寝室那块接他<sup>下铺小伙</sup>因为他<sup>下铺小伙</sup>晚上送她<sup>下铺小伙的女朋友</sup>回去之后在回寝室的路上路口有几只狗，他<sup>下铺小伙</sup>不敢过去。</p>
<p>　　我印象里他们<sup>下铺小伙和他的女朋友</sup>整个大学都在一起，后面他<sup>下铺小伙</sup>大学毕业去了长沙干过一段时间 Android 开发，后面被他妈给骗回去考公务员，最后考到社区里认识的这个结婚对象就结婚了。</p>
<p>　　不好评判什么，只是觉得 4 年的感情比较可惜。</p>
<p>　　天下没有不散的宴席，那时候我看中了现在这家公司，投了简历且两轮面试都过了，还给我开出了一个我无法拒绝的条件（实际上是“<em>他给的实在是太多了</em>”），所以我在年底的年会聚餐后我跟苏总提出了离职。</p>
<p>　　相处久了我觉得提离职这事都需要勇气，像极了一个渣男跟女生提分手，我很清楚一个人在同一个环境久了产生舒适区之后温水煮青蛙让人失去斗志，所以当苏总跟我说让我回去再考虑一下第二天再找我谈的时候我直接告诉他我已经考虑清楚了。</p>
<p><img src="/images/articles/4-years-in-Hangzhou/20201216_185849_2222x1080.webp" alt="围观产品玩2077"></p>
<p>　　我这一路走过来已经做过无数次选择了。</p>
<h1 id="5-2021"><a href="#5-2021" class="headerlink" title="5. 2021"></a>5. 2021</h1><p>　　年后回到岗位就开始走离职流程，一切交接完且入职现在的公司之后还没有招到接替我的人，交接的时候苏总也没有看我的代码，导致我离职之后很长一段时间都在问王总<sup>沙雕后端</sup>，苏总有没有看我的代码有没有喷我写得像*，十分担心风评被害。</p>
<p>　　后面总算招来一个 Android 来顶替我的位置，听王总<sup>沙雕后端</sup>说苏总经常对着他的位置叫我的名字，且又进行了传统仪式就是坐在他背后看他写代码，写一行喷一行。其实我觉得吧，有个懂技术且非常犇的老板能坐在你背后像个背后灵一样对你写的每一行代码进行灵魂拷问是一件很棒的事情。</p>
<p>　　每年清明的时候就想跑出去玩，今年又一个人跑去了乌镇，本以为得逛两天，结果一天给我把东栅跟西栅全逛完了，第二天一清早又提桶跑路回了杭州。</p>
<p><img src="/images/articles/4-years-in-Hangzhou/20210403_111033_2222x1080.webp" alt="宿迁大学毕业之后我再没养过这玩意"></p>
<p><img src="/images/articles/4-years-in-Hangzhou/20210403_183839_2222x1080.webp" alt="夜景"></p>
<p>　　杭州每年雨都下得特别多，但是跟湖南不同，以前待在湖南的时候，每年梅雨季节十分潮湿，衣服洗完了晒外面忘记收过段时间就能发霉，杭州嘛，雨下归下，还好不潮湿。</p>
<p><img src="/images/articles/4-years-in-Hangzhou/20210411_140918_2222x1080.webp" alt="白斑玉露"></p>
<p>　　4月底很快江干那边的房租又到期了，我现在的公司在滨江，所以我又要找房子搬家，同时我老太太告诉我了一个坏消息，我老爷子因为大腿感觉到酸胀所以去医院照了个CT，不检查不知道，一检查发现整根左腿大腿骨全是骨肿瘤，腿骨都应力侧变形弯曲了，如果要治疗得掏空整根左腿大腿骨或者截肢，老家那边的医院医生告诉他们做不了没把握，得去长沙。加上我新入职现在的公司又开始新员工培训，20+个小时的金融业务和公司规章制度培训视频还得考试过关了才能有转正资格，而且项目上又是一堆需求压到我头上。</p>
<p>　　那段时间处于又要找房子又要看培训视频准备考试还要担心我老爷子每天检测的结果，同时还得完成每天的需求。一瞬间感觉什么都开始脱离了我的计划与预期，不过我觉得我还是稳下来了，船到桥头自然直，手上的事还是得一件件解决。</p>
<p>　　房子之前无意间看到一间空间大的，实地看房才发现就在钱塘江边还有个一线江景阳台；新员工入职培训嘛刷完了视频，考试的时候考的东西不是查到了就是有印象，过了；老爷子去长沙做了穿刺活检之后结果是从小就长起的良性骨肿瘤，医生建议是继续观察，不做治疗，注意补钙左腿不要受伤；项目需求也如期完成。</p>
<p><img src="/images/articles/4-years-in-Hangzhou/20210522_192844_2222x1080.webp" alt="钱塘江"></p>
<p>　　絮絮叨叨了这么多，如同记流水账，想到什么就记下了什么，也不想表达什么，只是想记一记这些事情，就这样吧。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Hangzhou</tag>
      </tags>
  </entry>
  <entry>
    <title>Walle + Tinker + Bugly 多渠道热更新方案</title>
    <url>/articles/walle-tinker-bugly-hotfix/</url>
    <content><![CDATA[<h3 id="1-Walle"><a href="#1-Walle" class="headerlink" title="1.Walle"></a>1.Walle</h3><h4 id="1-1-接入"><a href="#1-1-接入" class="headerlink" title="1.1 接入"></a>1.1 接入</h4><p>在 Project 级的 <code>build.gradle</code> 内加入：</p>
<figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    classpath <span class="string">&#x27;com.meituan.android.walle:plugin:1.1.7&#x27;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>再在 app moudle 内的 <code>build.gradle</code> 中加入：</p>
<figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">apply <span class="attr">from:</span> <span class="string">&#x27;walle.gradle&#x27;</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    signingConfigs &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            keyAlias <span class="string">&#x27;keyAlias&#x27;</span></span><br><span class="line">            keyPassword <span class="string">&#x27;keyPassword&#x27;</span></span><br><span class="line">            storeFile file(<span class="string">&#x27;storeFile path&#x27;</span>)</span><br><span class="line">            storePassword <span class="string">&#x27;storePassword&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            ...</span><br><span class="line">            signingConfig signingConfigs.release</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 美团Walle多渠道打包</span></span><br><span class="line">    implementation <span class="string">&#x27;com.meituan.android.walle:library:1.1.7&#x27;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>app moudle 内新建一个 <code>walle.gradle</code>：</p>
<figure class="highlight groovy"><figcaption><span>walle.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;walle&#x27;</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    walle &#123;</span><br><span class="line">        <span class="comment">// 指定渠道包的输出路径</span></span><br><span class="line">        apkOutputFolder = <span class="keyword">new</span> File(<span class="string">&quot;$&#123;project.buildDir&#125;/outputs/channels&quot;</span>)</span><br><span class="line">        <span class="comment">// 定制渠道包的APK的文件名称</span></span><br><span class="line">        apkFileNameFormat = <span class="string">&#x27;$&#123;projectName&#125;-v$&#123;versionName&#125;-$&#123;channel&#125;-$&#123;buildTime&#125;.apk&#x27;</span></span><br><span class="line">        <span class="comment">// 渠道配置文件</span></span><br><span class="line">        channelFile = <span class="keyword">new</span> File(<span class="string">&quot;$&#123;project.getProjectDir()&#125;/channel&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同文件夹内 新建一个叫 <code>channel</code> 的文件，填写渠道名，每行一个，例如：</p>
<figure class="highlight plain"><figcaption><span>channel</span></figcaption><table><tr><td class="code"><pre><span class="line">Tencent</span><br><span class="line">Oppo</span><br><span class="line">Vivo</span><br><span class="line">HuaWei</span><br><span class="line">XiaoMi</span><br><span class="line">QiHu</span><br><span class="line">AppChina</span><br><span class="line">QinYu</span><br><span class="line">Dev</span><br></pre></td></tr></table></figure>

<h4 id="1-2-使用"><a href="#1-2-使用" class="headerlink" title="1.2 使用"></a>1.2 使用</h4><p>使用如下命令打包：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 所有渠道</span></span><br><span class="line">gradlew clean assembleReleaseChannels</span><br><span class="line"><span class="comment">// 指定渠道</span></span><br><span class="line">gradlew aseembleReleaseChannels -PchannelList=渠道名</span><br></pre></td></tr></table></figure>

<p>打出的渠道包在：<code>build/outputs/channels/</code> 中，路径可配。</p>
<h3 id="2-Tinker-Bugly"><a href="#2-Tinker-Bugly" class="headerlink" title="2. Tinker + Bugly"></a>2. Tinker + Bugly</h3><h4 id="2-1-接入"><a href="#2-1-接入" class="headerlink" title="2.1 接入"></a>2.1 接入</h4><p>在 Project 级的 <code>build.gradle</code> 内加入：</p>
<figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    classpath <span class="string">&quot;com.tencent.bugly:tinker-support:1.2.1&quot;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再在 app moudle 内的 <code>build.gradle</code> 中加入：</p>
<figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">apply <span class="attr">from:</span> <span class="string">&#x27;tinker-support.gradle&#x27;</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        multiDexEnabled <span class="literal">true</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    dexOptions &#123;</span><br><span class="line">        jumboMode = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    implementation <span class="string">&#x27;com.tencent.bugly:crashreport_upgrade:1.4.5&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.tencent.tinker:tinker-android-lib:1.9.14.9&#x27;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>app moudle 内新建一个 <code>tinker-support.gradle</code>：</p>
<figure class="highlight groovy"><figcaption><span>tinker-support.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.tencent.bugly.tinker-support&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> bakPath = file(<span class="string">&quot;$&#123;buildDir&#125;/bakApk/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此处填写每次构建生成的基准包目录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">def</span> baseApkDir = <span class="string">&quot;app-1019-18-18-37&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对于插件各参数的详细解析请参考</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> tinkerSupport &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启tinker-support插件，默认值true</span></span><br><span class="line">    enable = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定归档目录，默认值当前module的子目录tinker</span></span><br><span class="line">    autoBackupApkDir = <span class="string">&quot;$&#123;bakPath&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否启用覆盖tinkerPatch配置功能，默认值false</span></span><br><span class="line">    <span class="comment">// 开启后tinkerPatch配置不生效，即无需添加tinkerPatch</span></span><br><span class="line">    overrideTinkerPatchConfiguration = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编译补丁包时，必需指定基线版本的apk，默认值为空</span></span><br><span class="line">    <span class="comment">// 如果为空，则表示不是进行补丁包的编译</span></span><br><span class="line">    <span class="comment">// @&#123;link tinkerPatch.oldApk &#125;</span></span><br><span class="line">    baseApk = <span class="string">&quot;$&#123;bakPath&#125;/$&#123;baseApkDir&#125;/app-release.apk&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对应tinker插件applyMapping</span></span><br><span class="line">    baseApkProguardMapping = <span class="string">&quot;$&#123;bakPath&#125;/$&#123;baseApkDir&#125;/app-release-mapping.txt&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对应tinker插件applyResourceMapping</span></span><br><span class="line">    baseApkResourceMapping = <span class="string">&quot;$&#123;bakPath&#125;/$&#123;baseApkDir&#125;/app-release-R.txt&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建基准包和补丁包都要指定不同的tinkerId，并且必须保证唯一性</span></span><br><span class="line">    tinkerId = <span class="string">&quot;1.0-patch-1&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建多渠道补丁时使用</span></span><br><span class="line">    <span class="comment">// buildAllFlavorsDir = &quot;$&#123;bakPath&#125;/$&#123;baseApkDir&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否启用加固模式，默认为false.(tinker-spport 1.0.7起支持）</span></span><br><span class="line">    <span class="comment">// isProtectedApp = true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否开启反射Application模式</span></span><br><span class="line">    enableProxyApplication = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否支持新增非export的Activity（注意：设置为true才能修改AndroidManifest文件）</span></span><br><span class="line">    supportHotplugComponent = <span class="literal">true</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一般来说,我们无需对下面的参数做任何的修改</span></span><br><span class="line"><span class="comment"> * 对于各参数的详细介绍请参考:</span></span><br><span class="line"><span class="comment"> * https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> tinkerPatch &#123;</span><br><span class="line">    <span class="comment">//oldApk =&quot;$&#123;bakPath&#125;/$&#123;appName&#125;/app-release.apk&quot;</span></span><br><span class="line">    ignoreWarning = <span class="literal">false</span></span><br><span class="line">    useSign = <span class="literal">true</span></span><br><span class="line">    dex &#123;</span><br><span class="line">        dexMode = <span class="string">&quot;jar&quot;</span></span><br><span class="line">        pattern = [<span class="string">&quot;classes*.dex&quot;</span>]</span><br><span class="line">        loader = []</span><br><span class="line">    &#125;</span><br><span class="line">    lib &#123;</span><br><span class="line">        pattern = [<span class="string">&quot;lib/*/*.so&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res &#123;</span><br><span class="line">        pattern = [<span class="string">&quot;res/*&quot;</span>, <span class="string">&quot;r/*&quot;</span>, <span class="string">&quot;assets/*&quot;</span>, <span class="string">&quot;resources.arsc&quot;</span>, <span class="string">&quot;AndroidManifest.xml&quot;</span>]</span><br><span class="line">        ignoreChange = []</span><br><span class="line">        largeModSize = <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    packageConfig &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    sevenZip &#123;</span><br><span class="line">        zipArtifact = <span class="string">&quot;com.tencent.mm:SevenZip:1.1.10&quot;</span></span><br><span class="line">        <span class="comment">//path = &quot;/usr/local/bin/7za&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildConfig &#123;</span><br><span class="line">        keepDexApply = <span class="literal">false</span></span><br><span class="line">        <span class="comment">//tinkerId = &quot;1.0.1-base&quot;</span></span><br><span class="line">        <span class="comment">//applyMapping = &quot;$&#123;bakPath&#125;/$&#123;appName&#125;/app-release-mapping.txt&quot; //  可选，设置mapping文件，建议保持旧apk的proguard混淆方式</span></span><br><span class="line">        <span class="comment">//applyResourceMapping = &quot;$&#123;bakPath&#125;/$&#123;appName&#125;/app-release-R.txt&quot; // 可选，设置R.txt文件，通过旧apk文件保持ResId的分配</span></span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h4 id="2-2-初始化"><a href="#2-2-初始化" class="headerlink" title="2.2 初始化"></a>2.2 初始化</h4><h5 id="2-2-1-enableProxyApplication-false"><a href="#2-2-1-enableProxyApplication-false" class="headerlink" title="2.2.1 enableProxyApplication = false"></a>2.2.1 enableProxyApplication = false</h5><blockquote>
<p>这是Tinker推荐的接入方式，一定程度上会增加接入成本，但具有更好的兼容性。</p>
</blockquote>
<p>在以上 <code>tinker-support.gradle</code> 中 <code>enableProxyApplication = false</code> 的情况下：</p>
<p>自定义 Application，：</p>
<figure class="highlight java"><figcaption><span>SampleApplication.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleApplication</span> <span class="keyword">extends</span> <span class="title">TinkerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SampleApplication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(ShareConstants.TINKER_ENABLE_ALL, <span class="string">&quot;xxx.xxx.xxx.SampleApplicationLike&quot;</span>,</span><br><span class="line">                <span class="string">&quot;com.tencent.tinker.loader.TinkerLoader&quot;</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<strong>这个类集成TinkerApplication类，这里面不做任何操作，所有Application的代码都会放到ApplicationLike继承类当中</strong><br>参数解析<br>参数1：tinkerFlags 表示Tinker支持的类型 dex only、library only or all suuport，default: TINKER_ENABLE_ALL<br>参数2：delegateClassName Application代理类 这里填写你自定义的ApplicationLike<br>参数3：loaderClassName Tinker的加载器，使用默认即可<br>参数4：tinkerLoadVerifyFlag 加载dex或者lib是否验证md5，默认为false<br>参数5：useDelegateLastClassLoaderOnAPI29AndAbove 在API29及以上使用 DelegateLastClassLoader</p>
</blockquote>
<p>将 <code>AndroidManifest</code> 中 <code>application</code> 节点的 <code>android:name</code> 属性设置为该自定义 Application. </p>
<figure class="highlight xml"><figcaption><span>AndroidManifest.xml</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;application</span><br><span class="line">    android:name=&quot;.SampleApplication&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>自定义 ApplicationLike ：</p>
<figure class="highlight java"><figcaption><span>SampleApplicationLike.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleApplicationLike</span> <span class="keyword">extends</span> <span class="title">DefaultApplicationLike</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;ApplicationLike&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppLike</span><span class="params">(Application application, <span class="keyword">int</span> tinkerFlags, <span class="keyword">boolean</span> tinkerLoadVerifyFlag,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">long</span> applicationStartElapsedTime, <span class="keyword">long</span> applicationStartMillisTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                   Intent tinkerResultIntent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(application, tinkerFlags, tinkerLoadVerifyFlag, applicationStartElapsedTime,</span><br><span class="line">                applicationStartMillisTime, tinkerResultIntent);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBaseContextAttached</span><span class="params">(Context base)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onBaseContextAttached(base);</span><br><span class="line">        MultiDex.install(base);</span><br><span class="line">        Beta.installTinker(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="comment">// 补丁回调接口</span></span><br><span class="line">        Beta.betaPatchListener = <span class="keyword">new</span> BetaPatchListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPatchReceived</span><span class="params">(String patchFile)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;补丁下载地址: &quot;</span> + patchFile);</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDownloadReceived</span><span class="params">(<span class="keyword">long</span> savedLength, <span class="keyword">long</span> totalLength)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, String.format(Locale.getDefault(), <span class="string">&quot;%s %d%%&quot;</span>,</span><br><span class="line">                                Beta.strNotificationDownloading,</span><br><span class="line">                                (<span class="keyword">int</span>) (totalLength == <span class="number">0</span> ? <span class="number">0</span> : savedLength * <span class="number">100</span> / totalLength)));</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDownloadSuccess</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;补丁下载成功: &quot;</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDownloadFailure</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;补丁下载失败: &quot;</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplySuccess</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;补丁应用成功: &quot;</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplyFailure</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">                Log.e(TAG, <span class="string">&quot;补丁应用失败: &quot;</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPatchRollback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;补丁回滚&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 接入 Walle 后可以在这里设置渠道(可选)</span></span><br><span class="line">        <span class="comment">//String channel = WalleChannelReader.getChannel(getApplication(), &quot;Dev&quot;);</span></span><br><span class="line">        <span class="comment">//Bugly.setAppChannel(getApplication(), channel);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 是否为开发设备(可选)</span></span><br><span class="line">        Bugly.setIsDevelopmentDevice(getApplication(), <span class="keyword">true</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 这里实现SDK初始化，appId替换成你的在Bugly平台申请的appId</span></span><br><span class="line">        <span class="comment">// 调试时，将第三个参数改为true</span></span><br><span class="line">        Bugly.init(getApplication(), <span class="string">&quot;BUGLY_APP_ID&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerActivityLifecycleCallback</span><span class="params">(Application.ActivityLifecycleCallbacks callbacks)</span> </span>&#123;</span><br><span class="line">        getApplication().registerActivityLifecycleCallbacks(callbacks);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTerminate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onTerminate();</span><br><span class="line">        Beta.unInit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：Tinker 需要开启 MultiDex；<br>SampleApplicationLike 这个类是 Application 的代理类，以前所有在 Application 的实现必须要全部拷贝到这里，在 <code>onCreate</code> 方法调用SDK的初始化方法，在 <code>onBaseContextAttached</code> 中调用 <code>Beta.installTinker(this);</code> 。</p>
</blockquote>
<h5 id="2-2-2-enableProxyApplication-true"><a href="#2-2-2-enableProxyApplication-true" class="headerlink" title="2.2.2 enableProxyApplication = true"></a>2.2.2 enableProxyApplication = true</h5><figure class="highlight java"><figcaption><span>App.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="comment">// 这里实现SDK初始化，appId替换成你的在Bugly平台申请的appId</span></span><br><span class="line">        <span class="comment">// 调试时，将第三个参数改为true</span></span><br><span class="line">        Bugly.init(<span class="keyword">this</span>, <span class="string">&quot;BUGLY_APP_ID&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.attachBaseContext(base);</span><br><span class="line">        <span class="comment">// you must install multiDex whatever tinker is installed!</span></span><br><span class="line">        MultiDex.install(base);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 安装tinker</span></span><br><span class="line">        Beta.installTinker();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：无须你改造Application，主要是为了降低接入成本，我们插件会动态替换 AndroidMinifest 文件中的 Application 为我们定义好用于反射真实Application的类（需要您接入<strong>SDK 1.2.2版本</strong> 和 <strong>插件版本 1.0.3</strong>以上）。</p>
</blockquote>
<h4 id="2-3-AndroidManifest-配置"><a href="#2-3-AndroidManifest-配置" class="headerlink" title="2.3 AndroidManifest 配置"></a>2.3 AndroidManifest 配置</h4><h5 id="2-3-1-权限配置"><a href="#2-3-1-权限配置" class="headerlink" title="2.3.1 权限配置"></a>2.3.1 权限配置</h5><figure class="highlight xml"><figcaption><span>AndroidManifest.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_PHONE_STATE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_LOGS&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-3-2-Actvity-配置"><a href="#2-3-2-Actvity-配置" class="headerlink" title="2.3.2 Actvity 配置"></a>2.3.2 Actvity 配置</h5><figure class="highlight xml"><figcaption><span>AndroidManifest.xml</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;activity</span><br><span class="line">    android:name=&quot;com.tencent.bugly.beta.ui.BetaActivity&quot;</span><br><span class="line">    android:configChanges=&quot;keyboardHidden|orientation|screenSize|locale&quot;</span><br><span class="line">    android:theme=&quot;@android:style/Theme.Translucent&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-3-配置-FileProvider"><a href="#2-3-3-配置-FileProvider" class="headerlink" title="2.3.3 配置 FileProvider"></a>2.3.3 配置 FileProvider</h5><blockquote>
<p>注意：如果您想兼容 <code>Android N</code> 或者以上的设备，必须要在 <code>AndroidManifest.xml</code> 文件中配置 <code>FileProvider</code> 来访问共享路径的文件。</p>
</blockquote>
<figure class="highlight xml"><figcaption><span>AndroidManifest.xml</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;provider</span><br><span class="line">    android:name=&quot;androidx.core.content.FileProvider&quot;</span><br><span class="line">    android:authorities=&quot;$&#123;applicationId&#125;.fileProvider&quot;</span><br><span class="line">    android:exported=&quot;false&quot;</span><br><span class="line">    android:grantUriPermissions=&quot;true&quot;&gt;</span><br><span class="line">    &lt;meta-data</span><br><span class="line">        android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;</span><br><span class="line">        android:resource=&quot;@xml/provider_paths&quot; /&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果你使用的第三方库也配置了同样的 <code>FileProvider</code>, 可以通过继承 <code>FileProvider</code> 类来解决合并冲突的问题，示例如下：</p>
<figure class="highlight xml"><figcaption><span>AndroidManifest.xml</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;provider</span><br><span class="line">    android:name=&quot;.utils.BuglyFileProvider&quot;</span><br><span class="line">    android:authorities=&quot;$&#123;applicationId&#125;.fileProvider&quot;</span><br><span class="line">    android:exported=&quot;false&quot;</span><br><span class="line">    android:grantUriPermissions=&quot;true&quot;</span><br><span class="line">    tools:replace=&quot;name,authorities,exported,grantUriPermissions&quot;&gt;</span><br><span class="line">    &lt;meta-data</span><br><span class="line">        android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;</span><br><span class="line">        android:resource=&quot;@xml/provider_paths&quot;</span><br><span class="line">        tools:replace=&quot;name,resource&quot;/&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 <code>res</code> 目录新建 <code>xml</code> 文件夹，创建 <code>provider_paths.xml</code> 文件如下：</p>
<figure class="highlight xml"><figcaption><span>provider_paths.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">paths</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /storage/emulated/0/Download/xxx.xxx.xxx/.beta/apk--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">external-path</span> <span class="attr">name</span>=<span class="string">&quot;beta_external_path&quot;</span> <span class="attr">path</span>=<span class="string">&quot;Download/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/storage/emulated/0/Android/data/xxx.xxx.xxx/files/apk/--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">external-path</span> <span class="attr">name</span>=<span class="string">&quot;beta_external_files_path&quot;</span> <span class="attr">path</span>=<span class="string">&quot;Android/data/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">paths</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注：Tinker 1.3.1 及以上版本，可以不用进行以上配置，aar 已经在 AndroidManifest 配置了，并且包含了对应的资源文件。</strong></p>
</blockquote>
<h4 id="2-4-使用"><a href="#2-4-使用" class="headerlink" title="2.4 使用"></a>2.4 使用</h4><p>首先设置 <code>tinker-support.gradle</code> 中的 <code>tinkerId</code> ，要确保 <code>tinkerId</code> 的唯一性，且不要与 App 版本号相同，使用 Walle 打包的同时，也会在 bakApk 里生成 基准包，如果发布之后发现Bug，则修改 <code>tinkerId</code> ，将 <code>tinker-support.gradle</code> 中的 <code>baseApkDir</code> 修改为 bakApk 文件夹中 基准包 的文件夹名，然后使用</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">gralew buildTinkerPatchRelease</span><br></pre></td></tr></table></figure>

<p>打出补丁，补丁文件在 <code>app\build\outputs\patch\release</code> 文件夹内，再使用 Bugly 后台上传，<a href="https://bugly.qq.com/docs/user-guide/instruction-manual-android-hotfix-demo/?v=20200622202242">官方文档</a></p>
<h3 id="3-踩过的坑"><a href="#3-踩过的坑" class="headerlink" title="3.踩过的坑"></a>3.踩过的坑</h3><h4 id="3-1-gradle-build-tools-与-gradle-的版本不能太高"><a href="#3-1-gradle-build-tools-与-gradle-的版本不能太高" class="headerlink" title="3.1 gradle build tools 与 gradle 的版本不能太高"></a>3.1 <del>gradle build tools 与 gradle 的版本不能太高</del></h4><p><del>Bugly 的 Tinker Support 目前还不兼容 build tool 3.2.0 以上的版本，gradle 版本 4.6 以上也不兼容，否则会报各种错误</del></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">classpath <span class="string">&#x27;com.android.tools.build:gradle:3.2.0&#x27;</span></span><br><span class="line"></span><br><span class="line">distributionUrl=https\:<span class="comment">//services.gradle.org/distributions/gradle-4.6-all.zip</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-Java-8-语法"><a href="#3-2-Java-8-语法" class="headerlink" title="3.2 Java 8 语法"></a>3.2 <del>Java 8 语法</del></h4><p><del>同时如果项目的编译语法设置为 <strong>Java 8</strong> 的话，会抛出如下错误：</del></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Java 8 language support, as requested by &#39;android.enableD8.desugaring&#x3D; true&#39; in your gradle.properties file, is not supported when &#39;android.useDexArchive&#x3D; false&#39;.</span><br></pre></td></tr></table></figure>

<p><del>需要在 <code>Project Properties</code> 级的 <code>gradle.properties</code> 中加入：</del></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">android.enableD8.desugaring=<span class="literal">false</span></span><br><span class="line">android.useDexArchive= <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="4-Demo-地址"><a href="#4-Demo-地址" class="headerlink" title="4. Demo 地址"></a>4. Demo 地址</h3><p><a href="https://github.com/WangZhiYao/TinkerTest">Github</a></p>
<p>基准包在 <strong>base</strong>  分支，修复包在 <strong>patch</strong> 分支</p>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>2020.11.07 ：</p>
<p>根据 tinker 官方 <a href="https://github.com/BuglyDevTeam/Bugly-Android-Demo/issues/247#issuecomment-656568646">github issue</a> 中 其他人的配置：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">classpath <span class="string">&#x27;com.android.tools.build:gradle:3.4.1&#x27;</span></span><br><span class="line"></span><br><span class="line">distributionUrl=https\:<span class="comment">//services.gradle.org/distributions/gradle-5.1.1-all.zip</span></span><br><span class="line"></span><br><span class="line">implementation <span class="string">&#x27;com.tencent.bugly:crashreport_upgrade:1.4.5&#x27;</span> </span><br><span class="line">implementation <span class="string">&#x27;com.tencent.tinker:tinker-android-lib:1.9.14.5&#x27;</span> </span><br></pre></td></tr></table></figure>

<p>这样配置解决了 build gradle tool 版本过低导致 Java 8 语法的问题</p>
<p>app minSdkVersion 低于19 ，<code>multiDexEnabled  = true</code> 的时候，如果报出 xxxxloader.class 之类的不在 mianDex 时，需要手动去设置 mainDexFile，将之前报的 class 手动分配到 mainDex 中</p>
<p>app minSdkVersion &gt;= 21 时，打补丁包同样会报错，因为 google 在 api &gt;= 21 之后 mainDexFile 已经不生效了，这时需要在 <code>tinker-support.gradle</code> 中加入</p>
<figure class="highlight groovy"><figcaption><span>tinker-support.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">tinkerSupport &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Android API 21 以上 无法自定义mainDexList，导致loader分到次dex中Tinker报错无法生成补丁，忽略即可</span></span><br><span class="line">    <span class="comment">// https://github.com/Tencent/tinker/issues/1084</span></span><br><span class="line">    ignoreWarning = <span class="literal">true</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Hotfix</tag>
      </tags>
  </entry>
</search>
