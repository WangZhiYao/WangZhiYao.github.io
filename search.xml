<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android 启动模式</title>
    <url>/articles/android-launch-mode/</url>
    <content><![CDATA[<h2 id="1-Standard"><a href="#1-Standard" class="headerlink" title="1.Standard"></a>1.Standard</h2><p>这个模式是默认的启动模式，即标准模式，在不指定启动模式的前提下，系统默认使用该模式启动 Activity ，每次启动一个 Activity 都会重写创建一个新的实例，不管这个实例存不存在，这种模式下，谁启动了该模式的 Activity ，该 Activity 就属于启动它的 Activity 的任务栈中。这个 Activity 它的 <code>onCreate()</code>，<code>onStart()</code>，<code>onResume()</code> 方法都会被调用。</p>
<h2 id="2-SingleTop"><a href="#2-SingleTop" class="headerlink" title="2.SingleTop"></a>2.SingleTop</h2><p>这个模式下，如果新的 Activity 已经位于栈顶，那么这个 Activity 不会被重写创建，同时它的 <code>onNewIntent()</code> 方法会被调用，通过此方法的参数我们可以去除当前请求的信息。如果栈顶不存在该Activity的实例，则情况与 standard 模式相同。需要注意的是这个Activity它的 <code>onCreate()</code>，<code>onStart()</code> 方法不会被调用，因为它并没有发生改变。</p>
<ul>
<li>当前栈中已有该 Activity 的实例并且该实例位于栈顶时，不会新建实例，而是复用栈顶的实例，并且会将 Intent 对象传入，回调 <code>onNewIntent()</code> 方法。</li>
<li>当前栈中已有该 Activity 的实例但是该实例不在栈顶时，其行为和 Standard 启动模式一样，依然会创建一个新的实例。</li>
<li>当前栈中不存在该 Activity 的实例时，其行为同 Standard 启动模式。</li>
</ul>
<h2 id="3-SingleInstance"><a href="#3-SingleInstance" class="headerlink" title="3.SingleInstance"></a>3.SingleInstance</h2><p>该模式也是单例的，但和 SingleTask 不同， SingleTask 只是任务栈内单例，系统里是可以有多个 SingleTask Activity 实例的，而 SingleInstance Activity 在整个系统里只有一个实例，启动一 SingleInstanceActivity 时，系统会创建一个新的任务栈，并且这个任务栈只有他一个Activity。</p>
<h2 id="4-SingleTask"><a href="#4-SingleTask" class="headerlink" title="4.SingleTask"></a>4.SingleTask</h2><p>该模式的 Activity 在同一个 Task 内只有一个实例，如果 Activity 已经位于栈顶，系统不会创建新的 Activity 实例，和 SingleTop 模式一样。但 Activity已经存在但不位于栈顶时，系统就会把该 Activity 移到栈顶，并把它上面的 Activity 出栈。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 中的 Parcelable 与 Serializable</title>
    <url>/articles/android-parcelable-serializable/</url>
    <content><![CDATA[<h2 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.作用</h2><p>Serializable 的作用是为了保存对象的属性到本地文件、数据库、网络流、rmi 以方便数据传输，当然这种传输可以是程序内的也可以是两个程序间的。</p>
<p>而 Android 的 Parcelable 的设计初衷是因为 Serializable 效率过慢。为了在程序内不同组件间以及不同 Android 程序(AIDL)高效的传输数据而设计，这些数据仅在内存中存在，Parcelable 是通过 IBinder 通信的消息的载体。</p>
<h2 id="2-区别"><a href="#2-区别" class="headerlink" title="2.区别"></a>2.区别</h2><p>两者最大的区别在于存储媒介的不同，Serializable 使用 I/O 读写存储在硬盘上，而 Parcelable 是直接在内存中读写。很明显，内存的读写速度通常大于 I/O 读写，所以在 Android 中传递数据优先选择 Parcelable。</p>
<p>Serializable 会使用反射，序列化和反序列化过程需要大量的 I/O 操作，会在序列化的时候创建许多临时对象，容易触发GC。</p>
<p>Parcelable 自已实现封送和解封（marshalled &amp; unmarshalled）操作不需要用反射，数据也存放在 Native 内存中，效率要快很多。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>Android RecyclerView 将指定 Item 滑动到顶部</title>
    <url>/articles/android-recyclerview-smoothscroller/</url>
    <content><![CDATA[<p>只能在 <code>LayoutManager</code> 为 <strong>LinearLayoutManager 及其子类</strong>的情况下使用！！</p>
<a id="more"></a>

<p>在 <code>LinearLayoutManager</code> 中的 <code>smoothScrollToPosition</code> 是通过 <code>LinearSmoothScroller</code> 来实现滚动的，每次调用都会新建一个 LinearSmoothScroller 来执行操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">smoothScrollToPosition</span><span class="params">(RecyclerView recyclerView,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   RecyclerView.State state,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    LinearSmoothScroller linearSmoothScroller = <span class="keyword">new</span> LinearSmoothScroller(recyclerView.getContext());</span><br><span class="line">    linearSmoothScroller.setTargetPosition(position);</span><br><span class="line">    startSmoothScroll(linearSmoothScroller);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么查看 <code>LinearSmoothScroller</code> 的代码，里面有3个参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Align child view&#x27;s left or top with parent view&#x27;s left or top</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #calculateDtToFit(int, int, int, int, int)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #calculateDxToMakeVisible(android.view.View, int)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #calculateDyToMakeVisible(android.view.View, int)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SNAP_TO_START = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Align child view&#x27;s right or bottom with parent view&#x27;s right or bottom</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #calculateDtToFit(int, int, int, int, int)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #calculateDxToMakeVisible(android.view.View, int)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #calculateDyToMakeVisible(android.view.View, int)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SNAP_TO_END = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Decides if the child should be snapped from start or end, depending</span></span><br><span class="line"><span class="comment"> * on where it currently is in relation to its parent.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;For instance, if the view is virtually on the left of RecyclerView,</span></span><br><span class="line"><span class="comment"> * using &#123;<span class="doctag">@code</span> SNAP_TO_ANY&#125; is the same as using &#123;<span class="doctag">@code</span> SNAP_TO_START&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #calculateDtToFit(int, int, int, int, int)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #calculateDxToMakeVisible(android.view.View, int)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #calculateDyToMakeVisible(android.view.View, int)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SNAP_TO_ANY = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>SNAP_TO_START</strong> 表示将子视图对齐到 RecyclerView 的左边（水平滑动）或者顶部（垂直滑动）</li>
<li><strong>SNAP_TO_END</strong> 表示将子视图对齐到 RecyclerView 的右边（水平滑动）或者底部（垂直滑动）</li>
<li><strong>SNAP_TO_ANY</strong> 根据子视图的当前位置与父布局的关系，决定使用上面的哪种。</li>
</ul>
<p>这3个常量在如下两个函数上使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * When scrolling towards a child view, this method defines whether</span></span><br><span class="line"><span class="comment"> * we should align the leftor the right edge of the child with the </span></span><br><span class="line"><span class="comment"> * parent RecyclerView.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> SNAP_TO_START, SNAP_TO_END or SNAP_TO_ANY;</span></span><br><span class="line"><span class="comment"> * depending on the current target vector</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #SNAP_TO_START</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #SNAP_TO_END</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #SNAP_TO_ANY</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getHorizontalSnapPreference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mTargetVector == <span class="keyword">null</span> || mTargetVector.x == <span class="number">0</span> ? SNAP_TO_ANY :</span><br><span class="line">            mTargetVector.x &gt; <span class="number">0</span> ? SNAP_TO_END : SNAP_TO_START;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * When scrolling towards a child view, this method defines whether</span></span><br><span class="line"><span class="comment"> * we should align the top or the bottom edge of the child with the</span></span><br><span class="line"><span class="comment"> * parent RecyclerView.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> SNAP_TO_START, SNAP_TO_END or SNAP_TO_ANY;</span></span><br><span class="line"><span class="comment"> * depending on the current target vector</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #SNAP_TO_START</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #SNAP_TO_END</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #SNAP_TO_ANY</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getVerticalSnapPreference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mTargetVector == <span class="keyword">null</span> || mTargetVector.y == <span class="number">0</span> ? SNAP_TO_ANY :</span><br><span class="line">            mTargetVector.y &gt; <span class="number">0</span> ? SNAP_TO_END : SNAP_TO_START;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当 RecyclerView 为水平滑动时会使用 <code>getHorizontalSnapPreference</code> ，为垂直滑动时会使用 <code>getVerticalSnapPreference</code> ，所以可以通过继承 <code>LinearSmoothScroller</code> 重写 <code>getHorizontalSnapPreference()</code> 或 <code>getVerticalSnapPreference</code> 来实现将指定 Item 滑动到顶部：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrollToTopSmoothScroller</span> <span class="keyword">extends</span> <span class="title">LinearSmoothScroller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScrollToTopSmoothScroller</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getHorizontalSnapPreference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SNAP_TO_START;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getVerticalSnapPreference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SNAP_TO_START;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ScrollToTopSmoothScroller smoothScroller = <span class="keyword">new</span> ScrollToTopSmoothScroller(context);</span><br><span class="line">smoothScroller.setTargetPosition(position);</span><br><span class="line">layoutManager.startSmoothScroll(smoothScroller);</span><br></pre></td></tr></table></figure>
<p>不可复用，每次滑动需要重新创建</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>RecyclerView</tag>
      </tags>
  </entry>
  <entry>
    <title>RecyclerView ItemDecoration 均分 Item 间隔</title>
    <url>/articles/android-recyclerview-spaceing-item-decoration/</url>
    <content><![CDATA[<p>在 RecyclerView 中使用 ItemDecoration 重写 <strong>getItemOffsets</strong> 设置每个 Item 的间隔，支持各种 LayoutManager:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpacingItemDecoration</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemDecoration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> spanCount;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> spacing;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> includeEdge;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpacingItemDecoration</span><span class="params">(<span class="keyword">int</span> spacing, <span class="keyword">int</span> spanCount, <span class="keyword">boolean</span> includeEdge)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.spacing = spacing;</span><br><span class="line">        <span class="keyword">this</span>.spanCount = spanCount;</span><br><span class="line">        <span class="keyword">this</span>.includeEdge = includeEdge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(<span class="meta">@NotNull</span> Rect outRect, <span class="meta">@NotNull</span> View view, RecyclerView parent,</span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="meta">@NotNull</span> RecyclerView.State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> position = parent.getChildAdapterPosition(view);</span><br><span class="line">        <span class="keyword">int</span> column = position % spanCount;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (includeEdge) &#123;</span><br><span class="line">            outRect.left = spacing - column * spacing / spanCount;</span><br><span class="line">            outRect.right = (column + <span class="number">1</span>) * spacing / spanCount;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (position &lt; spanCount) &#123;</span><br><span class="line">                outRect.top = spacing;</span><br><span class="line">            &#125;</span><br><span class="line">            outRect.bottom = spacing;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            outRect.left = column * spacing / spanCount;</span><br><span class="line">            outRect.right = spacing - (column + <span class="number">1</span>) * spacing / spanCount;</span><br><span class="line">            <span class="keyword">if</span> (position &gt;= spanCount) &#123;</span><br><span class="line">                outRect.top = spacing;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>RecyclerView</tag>
      </tags>
  </entry>
  <entry>
    <title>TextView 添加下划线，删除线，加粗</title>
    <url>/articles/android-textview-underline-bold-strikethrough/</url>
    <content><![CDATA[<p>通过 TextView 的 <code>setPaintFlags</code> 方式来添加下划线，删除线，加粗，在原有的 PaintFlags 上添加新的 Flag 而不清除原有的 Flags</p>
<ul>
<li><p>Paint.ANTI_ALIAS_FLAG 抗锯齿</p>
</li>
<li><p>Paint.FILTER_BITMAP_FLAG 用于对 Bitmap 进行转换（例如缩放）时对 Bitmap 进行双线性过滤</p>
</li>
<li><p>Paint.DITHER_FLAG  会影响对比设备精度更高的颜色进行下采样的方式</p>
</li>
<li><p>Paint.UNDERLINE_TEXT_FLAG 下划线</p>
</li>
<li><p>Paint.STRIKE_THRU_TEXT_FLAG 删除线</p>
</li>
<li><p>Paint.FAKE_BOLD_TEXT_FLAG 伪粗体，并不是通过选用更高 weight 的字体让文字变粗，而是通过程序在运行时把文字给「描粗」</p>
</li>
<li><p>Paint.LINEAR_TEXT_FLAG 会调整文本绘制操作以平滑处理缩放比例，应当与 Paint.SUBPIXEL_TEXT_FLAG 一起使用</p>
</li>
<li><p>Paint.SUBPIXEL_TEXT_FLAG 亚像素级的抗锯齿</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextViewUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addUnderLine</span><span class="params">(TextView textView)</span> </span>&#123;</span><br><span class="line">        addPaintFlag(textView, Paint.UNDERLINE_TEXT_FLAG);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeUnderLine</span><span class="params">(TextView textView)</span> </span>&#123;</span><br><span class="line">        removePaintFlag(textView, Paint.UNDERLINE_TEXT_FLAG);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addStrikeThrough</span><span class="params">(TextView textView)</span> </span>&#123;</span><br><span class="line">        addPaintFlag(textView, Paint.STRIKE_THRU_TEXT_FLAG);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeStrikeThrough</span><span class="params">(TextView textView)</span> </span>&#123;</span><br><span class="line">        removePaintFlag(textView, Paint.STRIKE_THRU_TEXT_FLAG);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFakeBold</span><span class="params">(TextView textView)</span> </span>&#123;</span><br><span class="line">        addPaintFlag(textView, Paint.FAKE_BOLD_TEXT_FLAG);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeFakeBold</span><span class="params">(TextView textView)</span> </span>&#123;</span><br><span class="line">        removePaintFlag(textView, Paint.FAKE_BOLD_TEXT_FLAG);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addPaintFlag</span><span class="params">(TextView textView, <span class="keyword">int</span> paintFlag)</span> </span>&#123;</span><br><span class="line">        textView.setPaintFlags(textView.getPaintFlags() | paintFlag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removePaintFlag</span><span class="params">(TextView textView, <span class="keyword">int</span> paintFlag)</span> </span>&#123;</span><br><span class="line">        textView.setPaintFlags(textView.getPaintFlags() &amp; (~paintFlag));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>TextView</tag>
      </tags>
  </entry>
  <entry>
    <title>Java HashMap 与 Hashtable 的区别</title>
    <url>/articles/hashmap-hashtab/</url>
    <content><![CDATA[<h2 id="1-HashMap"><a href="#1-HashMap" class="headerlink" title="1.HashMap"></a>1.HashMap</h2><p>HashMap 不是线程安全的，HashMap 是 Map 接口的实现类，是将键映射到值的对象，其中键和值都是对象，并且不能包含重复键，但可以包含重复值。HashMap 允许 null key 和 null value， HashMap 是 HashTable 的轻量级实现 ，由于非线程安全，效率可能会比 Hashtable 高。</p>
<p>需要线程安全的 HashMap 可以使用 <strong>ConcurrentHashMap</strong>，其中 put 方法使用了 synchronized 加上线程锁。</p>
<h2 id="2-Hashtable"><a href="#2-Hashtable" class="headerlink" title="2.Hashtable"></a>2.Hashtable</h2><p>Hashtable 是线程安全的，是 Map 接口的实现类，不允许 null key 和 null value，主要方法都使用了 synchronized 线程锁。</p>
<h2 id="3-主要区别"><a href="#3-主要区别" class="headerlink" title="3.主要区别"></a>3.主要区别</h2><ul>
<li>HashMap允许将 null 作为一个 entry 的 key 或者 value，而 Hashtable 不允许。</li>
<li>HashMap 把 Hashtable 的 contains 方法去掉了，改成 containsValue 和 containsKey。因为 contains 方法容易让人引起误解。</li>
<li>Hashtable 继承自 Dictionary，而 HashMap 继承自 AbstractMap，而 AbstractMap 是 Java1.2 引进的 Map 接口的一个实现类。</li>
<li>Hashtable 的方法是线程安全的，而 HashMap 不是，在多个线程访问 Hashtable 时，不需要自己为它的方法实现同步，而 HashMap 就必须手动提供外同步。</li>
<li>HashTable中的 initialCapacity 初始大小是11，增加的方式是 (oldCapacity &lt;&lt; 1) + 1 即为 oldCapacity * 2 + 1。HashMap 中 initialCapacity 数组的默认大小是 16，增加的方式是 oldCapacity &lt;&lt; 1。 loadFactor 同为 0.75。</li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>HPE Proliant Microserver Gen10 Plus</title>
    <url>/articles/hpe-proliant-microserver-gen10-plus/</url>
    <content><![CDATA[<blockquote>
<p>Update：再通过折腾发现，的确是因为我的显示器 DP 版本过高所以一开始视频没有输出。</p>
</blockquote>
<blockquote>
<p>Update：后续折腾发现，DP 口没有输出有可能是因为我的显示器 DP 口为 1.2 而 Gen10 Plus 自带的 DP 口为 1.0 导致的，而且，在通过 VGA-HDMI 的转换头之后再通过 HDMI 线连接到我显示器的 HDMI 口依旧没有输出，但是我同时将 DP 口 也插上线连接到我显示器之后 VGA 口就有输出了(Round 3 那会儿能点亮是我阴差阳错把 DP 口也一起插上了)，这真是人间迷惑行为。但是一切都有可能是我显示器的原因，因为我没有多的屏幕，所以不好确定到底是什么原因。</p>
</blockquote>
<blockquote>
<p>配置：</p>
<ul>
<li>型号：P16006-001</li>
<li>CPU：Xeon E-2224</li>
<li>内存：16GB ECC</li>
<li>不带硬盘</li>
<li>不带 Smart Array 100i Raid 卡</li>
<li>不带 iLO Enablement Kit</li>
<li>只有一个 PCI-E 接口！只有一个 PCI-E 接口！只有一个 PCI-E 接口！</li>
</ul>
</blockquote>
<a id="more"></a>

<p>再是花费：￥4597.77 ($655.94) + ￥647.40 (转运) + ￥599.70 (13%关税) = ￥5844.87</p>
<p>购买过程：</p>
<ol>
<li>3月26日从美亚购买的 Gen10 Plus，一开始在美亚买的时候是639刀左右，然后一觉醒来订单被取消了，说没有库存了，然后再一搜，上了个655刀的，这个操作有点迷惑，但是想了很久了，没办法，赶紧再下单，发的UPS</li>
<li>3月28日到达顺丰美国转运仓，然后走的顺丰海淘转运，入库时称重为7.25kg</li>
<li>4月1日顺丰收取快件，疫情原因加上周末美国那边不上班，所以拖了很久</li>
<li>4月2日开始转运到纽约</li>
<li>4月5日到达香港，然后清明节海关放假</li>
<li>4月7日到达广州，进行清关，由于顺丰海淘是阳光清关，主动申报，所以必被税</li>
<li>4月8日清关完成</li>
<li>4月9日到达广州白云机场，准备国内派送</li>
<li>4月10日签收</li>
</ol>
<h2 id="Round-1"><a href="#Round-1" class="headerlink" title="Round 1"></a>Round 1</h2><p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200410_191257.webp" alt="签收"></p>
<p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200410_193534.webp" alt="开箱"></p>
<p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200410_193551.webp" alt="开箱"></p>
<p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200410_193702.webp" alt="开箱"></p>
<p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200410_193742.webp" alt="开箱"></p>
<p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200410_194406.webp" alt="开箱"></p>
<p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200410_194440.webp" alt="注意美版的电源插头"></p>
<p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200410_195443.webp" alt="机箱内部-侧面"></p>
<p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200410_200213.webp" alt="机箱内部-正面"></p>
<p>同时我还买了一块三星 860EVO 250G 用来做系统盘 和东芝 P300 2T 用来存数据之类的：</p>
<p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200411_014937.webp" alt="Samsung 860 EVO 250G 与 东芝P300 2T"></p>
<p>装上之后发现，2.5寸的三星SSD插在1号硬盘位也就是左上角完全是靠接口卡住的，而我又有强迫症，这样不是长久之计，请注意由于硬盘接口在左边，所以普通的硬盘托架是没有用的，因为那玩意是把硬盘固定在中间，实际上要在硬盘架的左边：</p>
<p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200411_014624.webp" alt="4个硬盘位"></p>
<p>然后我就又买了一个2.5寸转3.5寸的托架，同时这个电源插口是美国标准，于是又买了个电源插头转换器：</p>
<p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200411_012429.webp" alt="硬盘支架与电源插头转换器"></p>
<p>好在这个电源跟以前的笔记本电源是一样的，分为插头跟变压器，刚好室友的笔记本也是这样的，所以就借了室友的笔记本电源插头来使用一下，然后我又翻出来一根DP线，跟我的显示器连接起来，然后沙雕的事情就发生了：</p>
<p><strong>DP口没有输出</strong></p>
<p><strong>DP口没有输出</strong></p>
<p><strong>DP口没有输出</strong></p>
<p>然后我又买了根 HDMI 转 VGA 的线：</p>
<p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200411_020715.webp" alt="实际上买错了，不应该是 HDMI 转 VGA，应该是 VGA 转 HDMI 转换头"></p>
<p>从说明书中可以得知 Gen10 Plus 中 CPU 为 E-2224 的这款没有核显，同时自带的 DP 口为1.0：</p>
<p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200411_021301.webp" alt="Gen10 电子说明书"></p>
<p>DP1.0版本的输出1080P都悬，更何况我打算在上面装 Plex 当 HTPC，所以我又下单买了一块 GT 1030 亮机卡（其实现在想起来完全没必要，我用不上硬解）：</p>
<p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200411_012503.webp" alt="技嘉 GT 1030"></p>
<p>所以目前状况就卡在了机都没点亮的状态下…</p>
<p>等后续快递都到了再继续折腾</p>
<h2 id="Round-2"><a href="#Round-2" class="headerlink" title="Round 2"></a>Round 2</h2><p>今天显卡到了，GT 1030 半高亮机卡，拆开后盖，取下主板上的PCI-E扩展板，将这个半高显卡插进去再装回到主板上：</p>
<p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200412_005528.webp" alt="这个半高显卡的散热鳍片真的很锋利"></p>
<p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200412_005634.webp" alt="将显卡插入 PCI-E 槽"></p>
<p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200412_005756.webp" alt="装完的样子"></p>
<p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200412_010202.webp" alt="机箱背面"></p>
<p>关于这个 PCI-E 槽可以有很多选择：万兆网卡，启动盘等等，具体可以看下面这个视频，里面介绍了这个 PCI-E 口可以怎么玩，以及在合理的情况下 CPU 可以更换成什么：</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/x-_CyKuJz9s" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>所以这个 PCI-E 槽最终用来做什么还是看个人喜好 ，Gen10 Plus 的 E2224 版本是没有核显的，而我打算装个 Plex 来管理我的电影，所以需要一张独立显卡用来解码视频等，于是我就上了一张显卡。</p>
<p>在显卡装上去之后，我用了一根 HDMI 线来连接到我的显示器，然后开机，终于点亮了，但是又遇到一个很沙雕的问题：当我按下 F10 准备在系统自检之后进入 Intelligent Provisioning 用官方推荐的方式来安装系统时，画面一黑提示：no such device : EMBED340。</p>
<p>百思不得其解，到底是哪里出了问题，又去看了下文档，下了个 Intelligent Provisioning 的升级包(SSP)放在U盘里，准备升级下 Intelligent Provisioning 试试，因为我看到 F9 的话能进到 BIOS 设置，里面有从媒体选择升级包的选项，然后把U盘插到前面的 USB 口，又沙雕了，进去发现媒体列表里根本没有U盘这个东西.</p>
<p>既然官方的路子走不通，我就只能自己再用 Rufus 做了个 Win10 的启动盘，想着既然有了视频输出，系统总该能装上了，然后又是这种沙雕问题，画面卡在了 lanuch efi.ini 大概是这个，不太记得了，反正是加载 Win10 安装文件的过程，又是百思不得其解.</p>
<p>直接安装不行，我用 PE 装总可以吧？然后我又给U盘装了个 WePE ，拖了个 WinServer 2019 的 iso 进去，然后重启，从U盘启动，当我从U盘启动之后，WePE 有个选分辨率的界面，我选择之后，又沙雕了，屏幕黑了，但是从我的显示器指示灯来看，这个 HDMI 口是有输出的，但是就是一片黑，等了很久还是黑的，这就很迷惑了.</p>
<p>就目前为止两个让我迷惑的点：1.主板上自带的DP口到底是做什么用的，2.我上了独显之后为什么离开 BIOS 屏幕就黑了但是有视频输出</p>
<p>没办法，没有 VGA 的线，一切只有等明天 VGA 的线到了再看到底是怎么回事.</p>
<h2 id="Round-3"><a href="#Round-3" class="headerlink" title="Round 3"></a>Round 3</h2><p>由于之前买错了，买了根 HDMI 转 VGA 线，用不了，实际上应该买的是 VGA-HDMI 的转接头，所以前面买的线换货耽误了一天，刚好与硬盘托架一起到了：</p>
<p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200413_234052.webp" alt="应该是用 VGA 转 HDMI 转接器"></p>
<p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200413_201633.webp" alt="使用硬盘托架固定 SSD 之后"></p>
<p>然后使用 VGA-HDMI 转接头，连接 HDMI 线到我的显示器，然后开机，终于，亮了，然后进入 Intelligent Provisioning , 啊 ！！！</p>
<p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200413_202836.webp" alt="成功亮机"></p>
<p>然后就是很沙雕的问题，不知道是网的原因还是什么，反正一直装系统失败，然后我就去 HPE 官网下了个定制的 VMware ESXI 放到U盘然后插到前面的 USB 口，通过 Intelligent Provisioning 使用 U 盘安装，果然一下就 OK 了.</p>
<p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200413_221016.webp"></p>
<p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200413_205355.webp" alt="使用 Intelligent Provisioning 安装 VMware ESXI"></p>
<p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200413_220744.webp" alt="VMware ESXI 安装中"></p>
<p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200413_224954.webp" alt="VMware ESXI 安装完毕"></p>
<p>VMware ESXI 安装完成.</p>
<p>在安装的过程中需要输入密码，密码必须包含大小写数字与符号，其中符号这个用 <code>.</code> 通过不了，但是用 <code>!</code> 就可以，这个很迷…</p>
<p><img data-src="/images/articles/hpe-proliant-microserver-gen10-plus/20200413_232214.webp" alt="VMware ESXI 后台"></p>
<p>暂时折腾完毕。</p>
]]></content>
      <categories>
        <category>Microserver Gen 10 Plus</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>Microserver Gen10 Plus 安装 Proxmox VE</title>
    <url>/articles/microserver-gen10-plus-proxmox-ve/</url>
    <content><![CDATA[<h2 id="1-下载镜像"><a href="#1-下载镜像" class="headerlink" title="1.下载镜像"></a>1.下载镜像</h2><p>首先是去 Proxmox VE 的 <a href="https://www.proxmox.com/en/downloads/category/iso-images-pve">官网</a> 下载镜像</p>
<p><img data-src="/images/articles/microserver-gen10-plus-proxmox-ve/official-website.webp" alt="Proxmox VE 官网"></p>
<a id="more"></a>

<h2 id="2-制作启动盘"><a href="#2-制作启动盘" class="headerlink" title="2.制作启动盘"></a>2.制作启动盘</h2><p>使用 Rufus 或者 UltraISO 或者 balenaEtcher 都行，将镜像刷进 U盘 内，制作成启动盘。</p>
<h2 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3.安装</h2><p>建议将 U盘 插在 Gen10 Plus 前面板的 USB 口上，这样速度会快一点（由于没有买 iLO Enablement Kit，所以我把机器搬到桌子上连到显示器上，全程只能拍屏幕），接着启动电源，等到进入这个界面的时候按 F11，到启动菜单，选择你的 U盘 启动：</p>
<p><img data-src="/images/articles/microserver-gen10-plus-proxmox-ve/20200420_211154.webp"></p>
<p>然后就进入 Proxmox VE 的安装界面，选择第一个 <strong>Install Proxmox VE</strong> ：</p>
<p><img data-src="/images/articles/microserver-gen10-plus-proxmox-ve/20200420_214324.webp"></p>
<p>点击右下角的 <strong>I agree</strong> :</p>
<p><img data-src="/images/articles/microserver-gen10-plus-proxmox-ve/20200420_211307.webp"></p>
<p>然后选择要安装到哪个硬盘，在这里可以点击旁边的 <strong>Options</strong> 按钮设置成 zfs 做软 raid ：</p>
<p><img data-src="/images/articles/microserver-gen10-plus-proxmox-ve/20200420_211320.webp"></p>
<p>打开 <strong>Options</strong>，里面默认是 **ext4 **:</p>
<p><img data-src="/images/articles/microserver-gen10-plus-proxmox-ve/20200420_211340.webp"></p>
<p>可以点击下拉菜单选择其他：</p>
<blockquote>
<p>ext3, ext4, xfs, raid 0, raid 1, raid 10, raidz 1, raidz 2, raidz 3</p>
</blockquote>
<p><img data-src="/images/articles/microserver-gen10-plus-proxmox-ve/20200420_211359.webp"></p>
<p>再接下来就是填写 国家与时区还有键盘布局，国家填好之后时区会自动跟着变，键盘布局一般不需要改：</p>
<p><img data-src="/images/articles/microserver-gen10-plus-proxmox-ve/20200420_211433.webp"></p>
<p>再接下来就是设置 root 的密码以及邮箱：</p>
<p><img data-src="/images/articles/microserver-gen10-plus-proxmox-ve/20200420_211450.webp"></p>
<p>再是到这里设置 网络，<strong>网卡要选择 开头为 eno 的</strong>，根据你网线插在哪个口选择对应的，千万不要选错，不然进不了管理后台(坑了我很久，我还以为是我设置错了)，再接着设置 主机名，ip，掩码，网关与dns等：</p>
<p><img data-src="/images/articles/microserver-gen10-plus-proxmox-ve/20200420_214444.webp"></p>
<p>最后是确认界面，确认无误之后，就点击 <strong>Install</strong> 进行安装：</p>
<p><img data-src="/images/articles/microserver-gen10-plus-proxmox-ve/20200420_214541.webp"></p>
<p>安装中：</p>
<p><img data-src="/images/articles/microserver-gen10-plus-proxmox-ve/20200420_211709.webp"></p>
<p>最后跳转到这个界面的时候就安装成功了，点击右下角 <strong>Reboot</strong> 重启，正常启动：</p>
<p><img data-src="/images/articles/microserver-gen10-plus-proxmox-ve/20200420_211915.webp"></p>
<p>最后就是进入 Web UI 界面进行管理了，要注意的是 地址是：<strong><a href="https://server-ip:8006/">https://server-ip:8006</a></strong>，是 <strong>https</strong> 而不是 http：</p>
<p><img data-src="/images/articles/microserver-gen10-plus-proxmox-ve/20200422_223141.webp"></p>
]]></content>
      <categories>
        <category>Microserver Gen 10 Plus</category>
      </categories>
      <tags>
        <tag>Proxmox VE</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 连接控制插件</title>
    <url>/articles/mysql-connection-control-plugin/</url>
    <content><![CDATA[<p>最近查看服务器日志发现一堆IP尝试爆破我的 MySQL，我的数据库端口并没有修改，问题并不大，但是让这些IP无代价的爆破生成一堆日志让我很烦，所以查了一下各种解决方案，有提到 Fail2Ban，但是我服务器已经装了 DenyHosts，所以并不想再引入一个功能上有重复的包，所以使用了MySQL的 <code>Connection-Control</code> 插件，下面是它官网的描述：</p>
<a id="more"></a>

<blockquote>
<p>As of MySQL 5.7.17, MySQL Server includes a plugin library that enables administrators to introduce an increasing delay in server response to clients after a certain number of consecutive failed connection attempts. This capability provides a deterrent that slows down brute force attacks that attempt to access MySQL user accounts.</p>
</blockquote>
<p>这个插件库包含两个插件：</p>
<ul>
<li>CONNECTION_CONTROL : 用来控制登录失败的次数及延迟响应时间</li>
<li>CONNECTION_CONTROL_FAILED_LOGIN_ATTEMPTS : 该表将登录失败的操作记录至 <code>information_schema</code> 库中</li>
</ul>
<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSTALL PLUGIN CONNECTION_CONTROL SONAME &#39;connection_control.so&#39;;</span><br><span class="line">mysql&gt; INSTALL PLUGIN CONNECTION_CONTROL_FAILED_LOGIN_ATTEMPTS SONAME &#39;connection_control.so&#39;;</span><br></pre></td></tr></table></figure>
<h2 id="2-查看是是否安装与开启状态"><a href="#2-查看是是否安装与开启状态" class="headerlink" title="2.查看是是否安装与开启状态"></a>2.查看是是否安装与开启状态</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS WHERE PLUGIN_NAME LIKE &#39;connection%&#39;;</span><br></pre></td></tr></table></figure>
<p>输出类似如下：</p>
<table>
<thead>
<tr>
<th>PLUGIN_NAME</th>
<th>PLUGIN_STATUS</th>
</tr>
</thead>
<tbody><tr>
<td>CONNECTION_CONTROL</td>
<td>ACTIVE</td>
</tr>
<tr>
<td>CONNECTION_CONTROL_FAILED_LOGIN_ATTEMPTS</td>
<td>ACTIVE</td>
</tr>
</tbody></table>
<p>其中 <strong>PLUGIN_STATUS</strong> 状态为 <strong>ACTIVE</strong> 则证明插件都已经开启。</p>
<h2 id="3-查看参数"><a href="#3-查看参数" class="headerlink" title="3.查看参数"></a>3.查看参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &#39;%connection_control%&#39;;</span><br></pre></td></tr></table></figure>
<p>输出类似如下：</p>
<table>
<thead>
<tr>
<th>Variable_name</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>connection_control_failed_connections_threshold</td>
<td>3</td>
</tr>
<tr>
<td>connection_control_max_connection_delay</td>
<td>86400000</td>
</tr>
<tr>
<td>connection_control_min_connection_delay</td>
<td>300000</td>
</tr>
</tbody></table>
<p>其中：</p>
<ul>
<li><strong>connection_control_failed_connections_threshold</strong> 代表失败尝试的次数，默认为3，表示当连接失败3次后启用连接控制，0表示不开启。</li>
<li><strong>connection_control_max_connection_delay</strong> 单位为 <strong>毫秒</strong> ，最大响应延迟的时间，默认约25天，我的设置是1天。</li>
<li><strong>connection_control_min_connection_delay</strong> 单位为 <strong>毫秒</strong>，<strong>每次</strong> 响应延迟的 <strong>最小增量</strong>，默认1000毫秒，我的设置是5分钟。</li>
</ul>
<h2 id="4-修改参数"><a href="#4-修改参数" class="headerlink" title="4.修改参数"></a>4.修改参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SET GLOBAL connection_control_failed_connections_threshold &#x3D; 1;</span><br><span class="line">mysql&gt; SET GLOBAL connection_control_max_connection_delay &#x3D; 86400000;</span><br><span class="line">mysql&gt; SET GLOBAL connection_control_min_connection_delay &#x3D; 300000;</span><br></pre></td></tr></table></figure>
<p> <strong>通过以上方式重新设置参数或者重启数据库会导致配置还原，同时，<code>CONNECTION_CONTROL_FAILED_LOGIN_ATTEMPTS</code> 中的数据也会被清空，当前控制连接的次数也会被重置</strong></p>
<p><strong>建议通过在配置文件中的 <code>[mysqld]</code> 下加入以下内容的方式设置参数</strong>，这样才能保证即使重启也不需要重新设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Connection Control</span><br><span class="line">plugin-load-add &#x3D; connection_control.so</span><br><span class="line">connection_control_failed_connections_threshold &#x3D; 1</span><br><span class="line">connection_control_max_connection_delay &#x3D; 86400000</span><br><span class="line">connection_control_min_connection_delay &#x3D; 300000</span><br></pre></td></tr></table></figure>
<h2 id="5-查看当前控制连接的次数"><a href="#5-查看当前控制连接的次数" class="headerlink" title="5.查看当前控制连接的次数"></a>5.查看当前控制连接的次数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW GLOBAL STATUS LIKE &#39;Connection_control_delay_generated&#39;;</span><br></pre></td></tr></table></figure>
<h2 id="6-查看所有登录操作失败的记录"><a href="#6-查看所有登录操作失败的记录" class="headerlink" title="6.查看所有登录操作失败的记录"></a>6.查看所有登录操作失败的记录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; use information_schema;</span><br><span class="line">mysql&gt; SELECT * FROM CONNECTION_CONTROL_FAILED_LOGIN_ATTEMPTS;</span><br></pre></td></tr></table></figure>
<h2 id="7-卸载插件"><a href="#7-卸载插件" class="headerlink" title="7.卸载插件"></a>7.卸载插件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; UNINSTALL PLUGIN CONNECTION_CONTROL;</span><br><span class="line">mysql&gt; UNINSTALL PLUGIN CONNECTION_CONTROL_FAILED_LOGIN_ATTEMPTS;</span><br></pre></td></tr></table></figure>
<p>如果使用的是在配置文件中设置的参数，在卸载时也需要删除对应配置</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Proxmox VE 在 Ubuntu 中 N卡直通</title>
    <url>/articles/proxmox-ve-ubuntu-nvidia-passthrough/</url>
    <content><![CDATA[<p>由于 Microserver Gen10 Plus 中 CPU 为 E-2224 这款没有核显，而我有 HTPC 的需求，所以我在唯一的一个 PCI-E 接口上了一块 GT-1030，然后由于向 ESXI 中虚拟机传输文件的速度实在是慢得不行，我千兆的内网，传输文件时只能跑出 100-200mbps，不能忍，所以我改安装 Proxmox VE 了。</p>
<a id="more"></a>

<h2 id="1-Gobal-Setting"><a href="#1-Gobal-Setting" class="headerlink" title="1.Gobal Setting"></a>1.Gobal Setting</h2><p>首先，根据 <a href="https://pve.proxmox.com/wiki/PCI(e)_Passthrough">Proxmox VE 官方文档</a> 给出的 PCI-E 直通的前提条件，修改 Proxmox 主机中的 <code>/etc/default/grub</code> 来启用 <code>IOMMU</code> ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># If you change this file, run &#x27;update-grub&#x27; afterwards to update</span></span><br><span class="line"><span class="comment"># /boot/grub/grub.cfg.</span></span><br><span class="line"><span class="comment"># For full documentation of the options in this file, see:</span></span><br><span class="line"><span class="comment">#   info -f grub -n &#x27;Simple configuration&#x27;</span></span><br><span class="line"></span><br><span class="line">GRUB_DEFAULT=0</span><br><span class="line">GRUB_TIMEOUT=5</span><br><span class="line">GRUB_DISTRIBUTOR=<span class="string">&quot;Proxmox Virtual Environment&quot;</span></span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">&quot;quiet&quot;</span></span><br><span class="line">GRUB_CMDLINE_LINUX=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable os-prober, it might add menu entries for each guest</span></span><br><span class="line">GRUB_DISABLE_OS_PROBER=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment to enable BadRAM filtering, modify to suit your needs</span></span><br><span class="line"><span class="comment"># This works with Linux (no patch required) and with any kernel that obtains</span></span><br><span class="line"><span class="comment"># the memory map information from GRUB (GNU Mach, kernel of FreeBSD ...)</span></span><br><span class="line"><span class="comment">#GRUB_BADRAM=&quot;0x01234567,0xfefefefe,0x89abcdef,0xefefefef&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment to disable graphical terminal (grub-pc only)</span></span><br><span class="line"><span class="comment">#GRUB_TERMINAL=console</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The resolution used on graphical terminal</span></span><br><span class="line"><span class="comment"># note that you can use only modes which your graphic card supports via VBE</span></span><br><span class="line"><span class="comment"># you can see them in real GRUB with the command `vbeinfo&#x27;</span></span><br><span class="line"><span class="comment">#GRUB_GFXMODE=640x480</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment if you don&#x27;t want GRUB to pass &quot;root=UUID=xxx&quot; parameter to Linux</span></span><br><span class="line"><span class="comment">#GRUB_DISABLE_LINUX_UUID=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable generation of recovery mode menu entries</span></span><br><span class="line">GRUB_DISABLE_RECOVERY=<span class="string">&quot;true&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment to get a beep at grub start</span></span><br><span class="line"><span class="comment">#GRUB_INIT_TUNE=&quot;480 440 1&quot;</span></span><br></pre></td></tr></table></figure>
<p>将第 9 行的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">&quot;quiet&quot;</span></span><br></pre></td></tr></table></figure>
<p>如果你是 Intel CPU 改为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">&quot;quiet intel_iommu=on&quot;</span></span><br></pre></td></tr></table></figure>
<p>如果你是 AMD YES 的话，改为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">&quot;quiet amd_iommu=on&quot;</span></span><br></pre></td></tr></table></figure>
<p>保存之后执行以下命令来进行更新：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure>
<p>再将下面的添加到 <code>/etc/modules</code> 中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vfio</span><br><span class="line">vfio_iommu_type1</span><br><span class="line">vfio_pci</span><br><span class="line">vfio_virqfd</span><br></pre></td></tr></table></figure>
<p>执行以下命令来刷新 <code>initramfs</code> ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-initramfs -u -k all</span><br></pre></td></tr></table></figure>
<p>重启 Proxmox 主机，再执行以下命令来验证是否成功开启 <code>IOMMU</code> ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dmesg | grep -e DMAR -e IOMMU -e AMD-Vi</span><br></pre></td></tr></table></figure>
<p>返回类似如下的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[    0.025301] ACPI: DMAR 0x000000007BFE6000 0000B0 (v01 HPE    Server   00000001 1590 00000001)</span><br><span class="line">[    0.061429] DMAR: IOMMU enabled</span><br><span class="line">[    0.116477] DMAR: Host address width 39</span><br><span class="line">[    0.116478] DMAR: DRHD base: 0x000000fed91000 flags: 0x1</span><br><span class="line">[    0.116481] DMAR: dmar0: reg_base_addr fed91000 ver 1:0 cap d2008c40660462 ecap f050da</span><br><span class="line">[    0.116482] DMAR: RMRR base: 0x000000799d7000 end: 0x000000799f6fff</span><br><span class="line">[    0.116482] DMAR: RMRR base: 0x000000799c6000 end: 0x000000799c6fff</span><br><span class="line">[    0.116483] DMAR-IR: IOAPIC id 2 under DRHD base  0xfed91000 IOMMU 0</span><br><span class="line">[    0.116484] DMAR-IR: HPET id 0 under DRHD base 0xfed91000</span><br><span class="line">[    0.116484] DMAR-IR: Queued invalidation will be enabled to support x2apic and Intr-remapping.</span><br><span class="line">[    0.118014] DMAR-IR: Enabled IRQ remapping in x2apic mode</span><br><span class="line">[    0.593568] DMAR: No ATSR found</span><br><span class="line">[    0.593593] DMAR: dmar0: Using Queued invalidation</span><br><span class="line">[    0.595251] DMAR: Intel(R) Virtualization Technology for Directed I&#x2F;O</span><br></pre></td></tr></table></figure>
<p>其中 第 2 行，<code>IOMMU enable</code> 则证明启用成功</p>
<h2 id="2-GPU-Passthrough"><a href="#2-GPU-Passthrough" class="headerlink" title="2.GPU Passthrough"></a>2.GPU Passthrough</h2><p>通过在 Proxmox 主机上执行如下命令来获取 GPU 的 ID：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lspci -nn</span><br></pre></td></tr></table></figure>
<p>输出如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00:00.0 Host bridge [0600]: Intel Corporation Device [8086:3e33] (rev 07)</span><br><span class="line">00:01.0 PCI bridge [0604]: Intel Corporation Skylake PCIe Controller (x16) [8086:1901] (rev 07)</span><br><span class="line">00:12.0 Signal processing controller [1180]: Intel Corporation Cannon Lake PCH Thermal Controller [8086:a379] (rev 10)</span><br><span class="line">00:14.0 USB controller [0c03]: Intel Corporation Cannon Lake PCH USB 3.1 xHCI Host Controller [8086:a36d] (rev 10)</span><br><span class="line">00:14.2 RAM memory [0500]: Intel Corporation Cannon Lake PCH Shared SRAM [8086:a36f] (rev 10)</span><br><span class="line">00:16.0 Communication controller [0780]: Intel Corporation Cannon Lake PCH HECI Controller [8086:a360] (rev 10)</span><br><span class="line">00:16.4 Communication controller [0780]: Intel Corporation Device [8086:a364] (rev 10)</span><br><span class="line">00:17.0 SATA controller [0106]: Intel Corporation Cannon Lake PCH SATA AHCI Controller [8086:a352] (rev 10)</span><br><span class="line">00:1b.0 PCI bridge [0604]: Intel Corporation Cannon Lake PCH PCI Express Root Port [8086:a32c] (rev f0)</span><br><span class="line">00:1c.0 PCI bridge [0604]: Intel Corporation Cannon Lake PCH PCI Express Root Port [8086:a338] (rev f0)</span><br><span class="line">00:1d.0 PCI bridge [0604]: Intel Corporation Cannon Lake PCH PCI Express Root Port [8086:a330] (rev f0)</span><br><span class="line">00:1d.1 PCI bridge [0604]: Intel Corporation Cannon Lake PCH PCI Express Root Port [8086:a331] (rev f0)</span><br><span class="line">00:1d.2 PCI bridge [0604]: Intel Corporation Cannon Lake PCH PCI Express Root Port [8086:a332] (rev f0)</span><br><span class="line">00:1d.3 PCI bridge [0604]: Intel Corporation Cannon Lake PCH PCI Express Root Port [8086:a333] (rev f0)</span><br><span class="line">00:1f.0 ISA bridge [0601]: Intel Corporation Device [8086:a30a] (rev 10)</span><br><span class="line">00:1f.5 Serial bus controller [0c80]: Intel Corporation Cannon Lake PCH SPI Controller [8086:a324] (rev 10)</span><br><span class="line">01:00.0 System peripheral [0880]: Hewlett-Packard Company Integrated Lights-Out Standard Slave Instrumentation &amp; System Support [103c:3306] (rev 07)</span><br><span class="line">01:00.1 VGA compatible controller [0300]: Matrox Electronics Systems Ltd. MGA G200eH3 [102b:0538] (rev 02)</span><br><span class="line">01:00.2 System peripheral [0880]: Hewlett-Packard Company Integrated Lights-Out Standard Management Processor Support and Messaging [103c:3307] (rev 07)</span><br><span class="line">01:00.4 USB controller [0c03]: Hewlett-Packard Company iLO5 Virtual USB Controller [103c:22f6]</span><br><span class="line">02:00.0 Ethernet controller [0200]: Intel Corporation I350 Gigabit Network Connection [8086:1521] (rev 01)</span><br><span class="line">02:00.1 Ethernet controller [0200]: Intel Corporation I350 Gigabit Network Connection [8086:1521] (rev 01)</span><br><span class="line">02:00.2 Ethernet controller [0200]: Intel Corporation I350 Gigabit Network Connection [8086:1521] (rev 01)</span><br><span class="line">02:00.3 Ethernet controller [0200]: Intel Corporation I350 Gigabit Network Connection [8086:1521] (rev 01)</span><br><span class="line">07:00.0 VGA compatible controller [0300]: NVIDIA Corporation GP108 [10de:1d01] (rev a1)</span><br><span class="line">07:00.1 Audio device [0403]: NVIDIA Corporation GP108 High Definition Audio Controller [10de:0fb8] (rev a1)</span><br></pre></td></tr></table></figure>
<p>最后两行是我的显卡，记下他们的 ID：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">07:00.0 [10de:1d01]</span><br><span class="line">07:00.1 [10de:0fb8]</span><br></pre></td></tr></table></figure>
<p>再接着，在 <code>/etc/modprobe.d</code> 中创建 <code>vfio.conf</code> 文件，将以下内容写到里面：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">options vfio-pci ids&#x3D;10de:1d01,10de:0fb8 disable-vga&#x3D;1</span><br></pre></td></tr></table></figure>
<p>其中 ids 后面的内容是我前面记下的 GPU 的 ID，用 <code>,</code> 号分隔</p>
<p>再在同目录下新建一个 <code>blacklist.conf</code> 写入如下内容来保证 GPU 可以自由绑定而不会因为被 Proxmox 主机占用而出错，其中 <code>radeon</code> 是 A卡的驱动，<code>nouveau</code> 是自带的N卡驱动，就在这里连 A卡驱动一起给 ban 了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blacklist radeon</span><br><span class="line">blacklist nouveau</span><br><span class="line">blacklist nvidia</span><br></pre></td></tr></table></figure>
<p>再执行以下命令来刷新 <code>initramfs</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-initramfs -u -k all</span><br></pre></td></tr></table></figure>
<p>执行之后再重启 Proxmox 主机，重启完成之后，再执行如下命令验证：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lspci -nnk</span><br></pre></td></tr></table></figure>
<p>输出类似如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">07:00.0 VGA compatible controller [0300]: NVIDIA Corporation GP108 [10de:1d01] (rev a1)</span><br><span class="line">        Subsystem: Gigabyte Technology Co., Ltd GP108 [GeForce GT 1030] [1458:375c]</span><br><span class="line">        Kernel driver in use: vfio-pci</span><br><span class="line">        Kernel modules: nvidiafb, nouveau</span><br><span class="line">07:00.1 Audio device [0403]: NVIDIA Corporation GP108 High Definition Audio Controller [10de:0fb8] (rev a1)</span><br><span class="line">        Subsystem: Gigabyte Technology Co., Ltd GP108 High Definition Audio Controller [1458:375c]</span><br><span class="line">        Kernel driver in use: vfio-pci</span><br><span class="line">        Kernel modules: snd_hda_intel</span><br></pre></td></tr></table></figure>
<p>其中第 4 行与 第 8 行显示为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Kernel driver in use: vfio-pci</span><br></pre></td></tr></table></figure>
<p>则证明显卡直通成功了</p>
<h2 id="3-配置虚拟机"><a href="#3-配置虚拟机" class="headerlink" title="3.配置虚拟机"></a>3.配置虚拟机</h2><p>这里以 <strong>Ubuntu Server 18.04 LTS</strong> 为例：</p>
<p><img data-src="/images/articles/proxmox-ve-ubuntu-nvidia-passthrough/20200731_111152.webp" alt="创建"></p>
<p><img data-src="/images/articles/proxmox-ve-ubuntu-nvidia-passthrough/20200731_111236.webp" alt="设置镜像"></p>
<p>这里要注意的是 BIOS 要设置为 <strong>OVMF(UEFI)</strong> 至于是否要添加 EFI 磁盘，有什么影响我还不确定，但是我是添加了，还有就是 机器要设置为 <strong>q35</strong></p>
<p><img data-src="/images/articles/proxmox-ve-ubuntu-nvidia-passthrough/20200731_111405.webp" alt="系统设置"></p>
<p><img data-src="/images/articles/proxmox-ve-ubuntu-nvidia-passthrough/20200731_111724.webp" alt="硬盘设置"></p>
<p><img data-src="/images/articles/proxmox-ve-ubuntu-nvidia-passthrough/20200731_111759.webp" alt="设置CPU"></p>
<p><img data-src="/images/articles/proxmox-ve-ubuntu-nvidia-passthrough/20200731_111834.webp" alt="设置内存"></p>
<p><img data-src="/images/articles/proxmox-ve-ubuntu-nvidia-passthrough/20200731_111940.webp" alt="设置网络"></p>
<p><img data-src="/images/articles/proxmox-ve-ubuntu-nvidia-passthrough/20200731_112004.webp" alt="总设置"></p>
<p>在创建完之后，先不要急着启动，找到侧边栏的 <strong>硬件</strong> 选项：</p>
<p><img data-src="/images/articles/proxmox-ve-ubuntu-nvidia-passthrough/20200731_141610.webp" alt="添加 PCI-E 硬件"></p>
<p>再选中 <strong>显示</strong> 这一行，点击编辑，修改为 <strong>SPICE</strong> ：</p>
<p><img data-src="/images/articles/proxmox-ve-ubuntu-nvidia-passthrough/20200731_142041.webp" alt="编辑显存为SPICE"></p>
<p>最后修改完的设置应该为：</p>
<p><img data-src="/images/articles/proxmox-ve-ubuntu-nvidia-passthrough/20200731_142903.webp" alt="总配置"></p>
<p>然后再去启动虚拟机。</p>
<h2 id="4-Ubuntu-安装显卡驱动"><a href="#4-Ubuntu-安装显卡驱动" class="headerlink" title="4.Ubuntu 安装显卡驱动"></a>4.Ubuntu 安装显卡驱动</h2><p>通过 VNC 安装完系统之后，执行以下命令来安装系统更新：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update &amp;&amp; apt upgrade -y</span><br></pre></td></tr></table></figure>
<p>再安装 <strong>ubuntu-drivers-common</strong> 来安装驱动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install ubuntu-drivers-common</span><br></pre></td></tr></table></figure>
<p>ubuntu-drivers 安装完后再执行以下命令来自动安装驱动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu-drivers autoinstall</span><br></pre></td></tr></table></figure>
<p>这个驱动安装完后执行如下命令来验证：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure>
<p>如果报错，类似：</p>
<p><strong>NVIDIA-SMI has failed because it couldn’t communicate with the NVIDIA driver</strong></p>
<p>则再执行如下命令安装 cuda toolkit：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install nvidia-cuda-toolkit</span><br></pre></td></tr></table></figure>
<p>安装完成后再执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<p><img data-src="/images/articles/proxmox-ve-ubuntu-nvidia-passthrough/20200731_143853.webp"></p>
<p>则成功直通</p>
]]></content>
      <categories>
        <category>Microserver Gen 10 Plus</category>
      </categories>
      <tags>
        <tag>Proxmox VE</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 中赋值表达式的返回值</title>
    <url>/articles/value-of-java-assignment-expression/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>写代码的时候脑子里想着</p>
<blockquote>
<p>如果 flag = true 则 do something …</p>
</blockquote>
<p>于是手上跟着敲出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (flag = <span class="keyword">true</span>) &#123;</span><br><span class="line">    <span class="comment">// do something ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译器没有报错，当时思想走神也丝毫没有发觉这是一段弱智代码，调试的时候发现 if 里的语句每次都执行了，觉得不太对劲，然而仍然没有发现这段弱智代码有问题，本着格物致知的精神格了几分钟才发现这段代码应该是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">    <span class="comment">// do something ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>瞬间觉得自己宛如智障</p>
<a id="more"></a>

<h1 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h1><p>google 了一下 java 赋值表达式，才发现赋值表达式也是有返回值的，突然就想起：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>((len = in.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这点在 <a href="https://docs.oracle.com/javase/specs/jls/se13/html/jls-15.html#jls-15.26">Oracle Java 文档</a> 中有描述</p>
<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>赋值表达式的返回值是表达式中右边的值，<code>evaluation order</code>是从左到右也就是说：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> j = (i = <span class="number">3</span>) * i;</span><br></pre></td></tr></table></figure>
<p>i 会先被赋值为 3，再乘以本身，所以 j = 9</p>
<p>于是我当时写下的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (flag = <span class="keyword">true</span>) &#123;</span><br><span class="line">    <span class="comment">// do something ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>if 表达式中的 flag 每次都会被我设为 true 且返回值也是 boolean 类型所以编译器不会报错，然后进入 if 中执行</p>
<p>这就是这次弱智事情的结果</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>Walle + Tinker + Bugly 多渠道热更新方案</title>
    <url>/articles/walle-tinker-bugly-hotfix/</url>
    <content><![CDATA[<h3 id="1-Walle"><a href="#1-Walle" class="headerlink" title="1.Walle"></a>1.Walle</h3><h4 id="1-1-接入"><a href="#1-1-接入" class="headerlink" title="1.1 接入"></a>1.1 接入</h4><p>在 Project 级的 <code>build.gradle</code> 内加入：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    classpath <span class="string">&#x27;com.meituan.android.walle:plugin:1.1.7&#x27;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>再在 app Moudle 内的 <code>build.gradle</code> 中加入：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">from:</span> <span class="string">&#x27;walle.gradle&#x27;</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    signingConfigs &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            keyAlias <span class="string">&#x27;keyAlias&#x27;</span></span><br><span class="line">            keyPassword <span class="string">&#x27;keyPassword&#x27;</span></span><br><span class="line">            storeFile file(<span class="string">&#x27;storeFile path&#x27;</span>)</span><br><span class="line">            storePassword <span class="string">&#x27;storePassword&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            ...</span><br><span class="line">            signingConfig signingConfigs.release</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 美团Walle多渠道打包</span></span><br><span class="line">    implementation <span class="string">&#x27;com.meituan.android.walle:library:1.1.7&#x27;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>app Moudle 内新建一个 <code>walle.gradle</code>：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;walle&#x27;</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    walle &#123;</span><br><span class="line">        <span class="comment">// 指定渠道包的输出路径</span></span><br><span class="line">        apkOutputFolder = <span class="keyword">new</span> File(<span class="string">&quot;$&#123;project.buildDir&#125;/outputs/channels&quot;</span>)</span><br><span class="line">        <span class="comment">// 定制渠道包的APK的文件名称</span></span><br><span class="line">        apkFileNameFormat = <span class="string">&#x27;$&#123;projectName&#125;-v$&#123;versionName&#125;-$&#123;channel&#125;-$&#123;buildTime&#125;.apk&#x27;</span></span><br><span class="line">        <span class="comment">// 渠道配置文件</span></span><br><span class="line">        channelFile = <span class="keyword">new</span> File(<span class="string">&quot;$&#123;project.getProjectDir()&#125;/channel&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同文件夹内 新建一个叫 <code>channel</code> 的文件，填写渠道名，每行一个，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Tencent</span><br><span class="line">Oppo</span><br><span class="line">Vivo</span><br><span class="line">HuaWei</span><br><span class="line">XiaoMi</span><br><span class="line">QiHu</span><br><span class="line">AppChina</span><br><span class="line">QinYu</span><br><span class="line">Dev</span><br></pre></td></tr></table></figure>
<h4 id="1-2-使用"><a href="#1-2-使用" class="headerlink" title="1.2 使用"></a>1.2 使用</h4><p>使用如下命令打包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 所有渠道</span><br><span class="line">gradlew clean assembleReleaseChannels</span><br><span class="line">&#x2F;&#x2F; 指定渠道</span><br><span class="line">gradlew aseembleReleaseChannels -PchannelList&#x3D;渠道名</span><br></pre></td></tr></table></figure>
<p>打出的渠道包在：<code>build/outputs/channels/</code> 中，路径可配。</p>
<h3 id="2-Tinker-Bugly"><a href="#2-Tinker-Bugly" class="headerlink" title="2. Tinker + Bugly"></a>2. Tinker + Bugly</h3><h4 id="2-1-接入"><a href="#2-1-接入" class="headerlink" title="2.1 接入"></a>2.1 接入</h4><p>在 Project 级的 <code>build.gradle</code> 内加入：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    classpath <span class="string">&quot;com.tencent.bugly:tinker-support:1.2.1&quot;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再在 app Moudle 内的 <code>build.gradle</code> 中加入：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">from:</span> <span class="string">&#x27;tinker-support.gradle&#x27;</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        multiDexEnabled <span class="literal">true</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    dexOptions &#123;</span><br><span class="line">        jumboMode = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    implementation <span class="string">&#x27;com.tencent.bugly:crashreport_upgrade:1.4.5&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.tencent.tinker:tinker-android-lib:1.9.14.9&#x27;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>app Moudle 内新建一个 <code>tinker-support.gradle</code>：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.tencent.bugly.tinker-support&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> bakPath = file(<span class="string">&quot;$&#123;buildDir&#125;/bakApk/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此处填写每次构建生成的基准包目录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">def</span> baseApkDir = <span class="string">&quot;app-1019-18-18-37&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对于插件各参数的详细解析请参考</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tinkerSupport &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启tinker-support插件，默认值true</span></span><br><span class="line">    enable = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定归档目录，默认值当前module的子目录tinker</span></span><br><span class="line">    autoBackupApkDir = <span class="string">&quot;$&#123;bakPath&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否启用覆盖tinkerPatch配置功能，默认值false</span></span><br><span class="line">    <span class="comment">// 开启后tinkerPatch配置不生效，即无需添加tinkerPatch</span></span><br><span class="line">    overrideTinkerPatchConfiguration = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编译补丁包时，必需指定基线版本的apk，默认值为空</span></span><br><span class="line">    <span class="comment">// 如果为空，则表示不是进行补丁包的编译</span></span><br><span class="line">    <span class="comment">// @&#123;link tinkerPatch.oldApk &#125;</span></span><br><span class="line">    baseApk = <span class="string">&quot;$&#123;bakPath&#125;/$&#123;baseApkDir&#125;/app-release.apk&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对应tinker插件applyMapping</span></span><br><span class="line">    baseApkProguardMapping = <span class="string">&quot;$&#123;bakPath&#125;/$&#123;baseApkDir&#125;/app-release-mapping.txt&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对应tinker插件applyResourceMapping</span></span><br><span class="line">    baseApkResourceMapping = <span class="string">&quot;$&#123;bakPath&#125;/$&#123;baseApkDir&#125;/app-release-R.txt&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建基准包和补丁包都要指定不同的tinkerId，并且必须保证唯一性</span></span><br><span class="line">    tinkerId = <span class="string">&quot;1.0-patch-1&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建多渠道补丁时使用</span></span><br><span class="line">    <span class="comment">// buildAllFlavorsDir = &quot;$&#123;bakPath&#125;/$&#123;baseApkDir&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否启用加固模式，默认为false.(tinker-spport 1.0.7起支持）</span></span><br><span class="line">    <span class="comment">// isProtectedApp = true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否开启反射Application模式</span></span><br><span class="line">    enableProxyApplication = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否支持新增非export的Activity（注意：设置为true才能修改AndroidManifest文件）</span></span><br><span class="line">    supportHotplugComponent = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一般来说,我们无需对下面的参数做任何的修改</span></span><br><span class="line"><span class="comment"> * 对于各参数的详细介绍请参考:</span></span><br><span class="line"><span class="comment"> * https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tinkerPatch &#123;</span><br><span class="line">    <span class="comment">//oldApk =&quot;$&#123;bakPath&#125;/$&#123;appName&#125;/app-release.apk&quot;</span></span><br><span class="line">    ignoreWarning = <span class="literal">false</span></span><br><span class="line">    useSign = <span class="literal">true</span></span><br><span class="line">    dex &#123;</span><br><span class="line">        dexMode = <span class="string">&quot;jar&quot;</span></span><br><span class="line">        pattern = [<span class="string">&quot;classes*.dex&quot;</span>]</span><br><span class="line">        loader = []</span><br><span class="line">    &#125;</span><br><span class="line">    lib &#123;</span><br><span class="line">        pattern = [<span class="string">&quot;lib/*/*.so&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res &#123;</span><br><span class="line">        pattern = [<span class="string">&quot;res/*&quot;</span>, <span class="string">&quot;r/*&quot;</span>, <span class="string">&quot;assets/*&quot;</span>, <span class="string">&quot;resources.arsc&quot;</span>, <span class="string">&quot;AndroidManifest.xml&quot;</span>]</span><br><span class="line">        ignoreChange = []</span><br><span class="line">        largeModSize = <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    packageConfig &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    sevenZip &#123;</span><br><span class="line">        zipArtifact = <span class="string">&quot;com.tencent.mm:SevenZip:1.1.10&quot;</span></span><br><span class="line">        <span class="comment">//path = &quot;/usr/local/bin/7za&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildConfig &#123;</span><br><span class="line">        keepDexApply = <span class="literal">false</span></span><br><span class="line">        <span class="comment">//tinkerId = &quot;1.0.1-base&quot;</span></span><br><span class="line">        <span class="comment">//applyMapping = &quot;$&#123;bakPath&#125;/$&#123;appName&#125;/app-release-mapping.txt&quot; //  可选，设置mapping文件，建议保持旧apk的proguard混淆方式</span></span><br><span class="line">        <span class="comment">//applyResourceMapping = &quot;$&#123;bakPath&#125;/$&#123;appName&#125;/app-release-R.txt&quot; // 可选，设置R.txt文件，通过旧apk文件保持ResId的分配</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-2-初始化"><a href="#2-2-初始化" class="headerlink" title="2.2 初始化"></a>2.2 初始化</h4><h5 id="2-2-1-enableProxyApplication-false"><a href="#2-2-1-enableProxyApplication-false" class="headerlink" title="2.2.1 enableProxyApplication = false"></a>2.2.1 enableProxyApplication = false</h5><blockquote>
<p>这是Tinker推荐的接入方式，一定程度上会增加接入成本，但具有更好的兼容性。</p>
</blockquote>
<p>在以上 <code>tinker-support.gradle</code> 中 <code>enableProxyApplication = false</code> 的情况下：</p>
<p>自定义 Application，：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleApplication</span> <span class="keyword">extends</span> <span class="title">TinkerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SampleApplication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(ShareConstants.TINKER_ENABLE_ALL, <span class="string">&quot;xxx.xxx.xxx.SampleApplicationLike&quot;</span>,</span><br><span class="line">                <span class="string">&quot;com.tencent.tinker.loader.TinkerLoader&quot;</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：<strong>这个类集成TinkerApplication类，这里面不做任何操作，所有Application的代码都会放到ApplicationLike继承类当中</strong><br>参数解析<br>参数1：tinkerFlags 表示Tinker支持的类型 dex only、library only or all suuport，default: TINKER_ENABLE_ALL<br>参数2：delegateClassName Application代理类 这里填写你自定义的ApplicationLike<br>参数3：loaderClassName Tinker的加载器，使用默认即可<br>参数4：tinkerLoadVerifyFlag 加载dex或者lib是否验证md5，默认为false<br>参数5：useDelegateLastClassLoaderOnAPI29AndAbove 在API29及以上使用 DelegateLastClassLoader</p>
</blockquote>
<p>将 <code>manifest</code> 中 <code>application</code> 节点的 <code>android:name</code> 属性设置为该自定义 Application. </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;.SampleApplication&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>自定义 ApplicationLike ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleApplicationLike</span> <span class="keyword">extends</span> <span class="title">DefaultApplicationLike</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;ApplicationLike&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppLike</span><span class="params">(Application application, <span class="keyword">int</span> tinkerFlags, <span class="keyword">boolean</span> tinkerLoadVerifyFlag,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">long</span> applicationStartElapsedTime, <span class="keyword">long</span> applicationStartMillisTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                   Intent tinkerResultIntent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(application, tinkerFlags, tinkerLoadVerifyFlag, applicationStartElapsedTime,</span><br><span class="line">                applicationStartMillisTime, tinkerResultIntent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBaseContextAttached</span><span class="params">(Context base)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onBaseContextAttached(base);</span><br><span class="line">        MultiDex.install(base);</span><br><span class="line">        Beta.installTinker(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="comment">// 补丁回调接口</span></span><br><span class="line">        Beta.betaPatchListener = <span class="keyword">new</span> BetaPatchListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPatchReceived</span><span class="params">(String patchFile)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;补丁下载地址: &quot;</span> + patchFile);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDownloadReceived</span><span class="params">(<span class="keyword">long</span> savedLength, <span class="keyword">long</span> totalLength)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, String.format(Locale.getDefault(), <span class="string">&quot;%s %d%%&quot;</span>,</span><br><span class="line">                                Beta.strNotificationDownloading,</span><br><span class="line">                                (<span class="keyword">int</span>) (totalLength == <span class="number">0</span> ? <span class="number">0</span> : savedLength * <span class="number">100</span> / totalLength)));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDownloadSuccess</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;补丁下载成功: &quot;</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDownloadFailure</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;补丁下载失败: &quot;</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplySuccess</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;补丁应用成功: &quot;</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplyFailure</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">                Log.e(TAG, <span class="string">&quot;补丁应用失败: &quot;</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPatchRollback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;补丁回滚&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 接入 Walle 后可以在这里设置渠道(可选)</span></span><br><span class="line">        <span class="comment">//String channel = WalleChannelReader.getChannel(getApplication(), &quot;Dev&quot;);</span></span><br><span class="line">        <span class="comment">//Bugly.setAppChannel(getApplication(), channel);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 是否为开发设备(可选)</span></span><br><span class="line">        Bugly.setIsDevelopmentDevice(getApplication(), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里实现SDK初始化，appId替换成你的在Bugly平台申请的appId</span></span><br><span class="line">        <span class="comment">// 调试时，将第三个参数改为true</span></span><br><span class="line">        Bugly.init(getApplication(), <span class="string">&quot;BUGLY_APP_ID&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerActivityLifecycleCallback</span><span class="params">(Application.ActivityLifecycleCallbacks callbacks)</span> </span>&#123;</span><br><span class="line">        getApplication().registerActivityLifecycleCallbacks(callbacks);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTerminate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onTerminate();</span><br><span class="line">        Beta.unInit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：Tinker 需要开启 MultiDex；<br>SampleApplicationLike 这个类是 Application 的代理类，以前所有在 Application 的实现必须要全部拷贝到这里，在 <code>onCreate</code> 方法调用SDK的初始化方法，在 <code>onBaseContextAttached</code> 中调用 <code>Beta.installTinker(this);</code> 。</p>
</blockquote>
<h5 id="2-2-2-enableProxyApplication-true"><a href="#2-2-2-enableProxyApplication-true" class="headerlink" title="2.2.2 enableProxyApplication = true"></a>2.2.2 enableProxyApplication = true</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="comment">// 这里实现SDK初始化，appId替换成你的在Bugly平台申请的appId</span></span><br><span class="line">        <span class="comment">// 调试时，将第三个参数改为true</span></span><br><span class="line">        Bugly.init(<span class="keyword">this</span>, <span class="string">&quot;BUGLY_APP_ID&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.attachBaseContext(base);</span><br><span class="line">        <span class="comment">// you must install multiDex whatever tinker is installed!</span></span><br><span class="line">        MultiDex.install(base);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 安装tinker</span></span><br><span class="line">        Beta.installTinker();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：无须你改造Application，主要是为了降低接入成本，我们插件会动态替换 AndroidMinifest 文件中的 Application 为我们定义好用于反射真实Application的类（需要您接入<strong>SDK 1.2.2版本</strong> 和 <strong>插件版本 1.0.3</strong>以上）。</p>
</blockquote>
<h4 id="2-3-AndroidManifest-配置"><a href="#2-3-AndroidManifest-配置" class="headerlink" title="2.3 AndroidManifest 配置"></a>2.3 AndroidManifest 配置</h4><h5 id="2-3-1-权限配置"><a href="#2-3-1-权限配置" class="headerlink" title="2.3.1 权限配置"></a>2.3.1 权限配置</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_PHONE_STATE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_LOGS&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="2-3-2-Actvity-配置"><a href="#2-3-2-Actvity-配置" class="headerlink" title="2.3.2 Actvity 配置"></a>2.3.2 Actvity 配置</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;com.tencent.bugly.beta.ui.BetaActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:configChanges</span>=<span class="string">&quot;keyboardHidden|orientation|screenSize|locale&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">&quot;@android:style/Theme.Translucent&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="2-3-3-配置FileProvider"><a href="#2-3-3-配置FileProvider" class="headerlink" title="2.3.3 配置FileProvider"></a>2.3.3 配置FileProvider</h5><blockquote>
<p>注意：如果您想兼容Android N或者以上的设备，必须要在AndroidManifest.xml文件中配置FileProvider来访问共享路径的文件。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;androidx.core.content.FileProvider&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:authorities</span>=<span class="string">&quot;$&#123;applicationId&#125;.fileProvider&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:grantUriPermissions</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;android.support.FILE_PROVIDER_PATHS&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:resource</span>=<span class="string">&quot;@xml/provider_paths&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果你使用的第三方库也配置了同样的FileProvider, 可以通过继承FileProvider类来解决合并冲突的问题，示例如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;.utils.BuglyFileProvider&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:authorities</span>=<span class="string">&quot;$&#123;applicationId&#125;.fileProvider&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:grantUriPermissions</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:replace</span>=<span class="string">&quot;name,authorities,exported,grantUriPermissions&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;android.support.FILE_PROVIDER_PATHS&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:resource</span>=<span class="string">&quot;@xml/provider_paths&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:replace</span>=<span class="string">&quot;name,resource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在res目录新建xml文件夹，创建provider_paths.xml文件如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">paths</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /storage/emulated/0/Download/xxx.xxx.xxx/.beta/apk--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">external-path</span> <span class="attr">name</span>=<span class="string">&quot;beta_external_path&quot;</span> <span class="attr">path</span>=<span class="string">&quot;Download/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/storage/emulated/0/Android/data/xxx.xxx.xxx/files/apk/--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">external-path</span> <span class="attr">name</span>=<span class="string">&quot;beta_external_files_path&quot;</span> <span class="attr">path</span>=<span class="string">&quot;Android/data/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">paths</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注：Tinker 1.3.1及以上版本，可以不用进行以上配置，aar已经在AndroidManifest配置了，并且包含了对应的资源文件。</strong></p>
</blockquote>
<h4 id="2-4-使用"><a href="#2-4-使用" class="headerlink" title="2.4 使用"></a>2.4 使用</h4><p>首先设置 <code>tinker-support.gradle</code> 中的 <code>tinkerId</code> ，要确保 <code>tinkerId</code> 的唯一性，且不要与 App 版本号相同，使用 Walle 打包的同时，也会在 bakApk 里生成 基准包，如果发布之后发现Bug，则修改 <code>tinkerId</code> ，将 <code>tinker-support.gradle</code> 中的 <code>baseApkDir</code> 修改为 bakApk 文件夹中 基准包 的文件夹名，然后使用</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">gralew buildTinkerPatchRelease</span><br></pre></td></tr></table></figure>
<p>打出补丁，补丁文件在 <code>app\build\outputs\patch\release</code> 文件夹内，再使用 Bugly 后台上传，<a href="https://bugly.qq.com/docs/user-guide/instruction-manual-android-hotfix-demo/?v=20200622202242">官方文档</a></p>
<h3 id="3-踩过的坑"><a href="#3-踩过的坑" class="headerlink" title="3.踩过的坑"></a>3.踩过的坑</h3><h4 id="3-1-gradle-build-tools-与-gradle-的版本不能太高"><a href="#3-1-gradle-build-tools-与-gradle-的版本不能太高" class="headerlink" title="3.1 gradle build tools 与 gradle 的版本不能太高"></a>3.1 <del>gradle build tools 与 gradle 的版本不能太高</del></h4><p><del>Bugly 的 Tinker Support 目前还不兼容 build tool 3.2.0 以上的版本，gradle 版本 4.6 以上也不兼容，否则会报各种错误</del></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">classpath <span class="string">&#x27;com.android.tools.build:gradle:3.2.0&#x27;</span></span><br><span class="line"></span><br><span class="line">distributionUrl=https\:<span class="comment">//services.gradle.org/distributions/gradle-4.6-all.zip</span></span><br></pre></td></tr></table></figure>
<h4 id="3-2-Java-8-语法"><a href="#3-2-Java-8-语法" class="headerlink" title="3.2 Java 8 语法"></a>3.2 <del>Java 8 语法</del></h4><p><del>同时如果项目的编译语法设置为 <strong>Java 8</strong> 的话，会抛出如下错误：</del></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Java 8 language support, as requested by &#39;android.enableD8.desugaring&#x3D; true&#39; in your gradle.properties file, is not supported when &#39;android.useDexArchive&#x3D; false&#39;.</span><br></pre></td></tr></table></figure>
<p><del>需要在 <code>Project Properties</code> 级的 <code>gradle.properties</code> 中加入：</del></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">android.enableD8.desugaring=<span class="literal">false</span></span><br><span class="line">android.useDexArchive= <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="4-Demo-地址"><a href="#4-Demo-地址" class="headerlink" title="4. Demo 地址"></a>4. Demo 地址</h3><p><a href="https://github.com/WangZhiYao/TinkerTest">Github</a></p>
<p>基准包在 <strong>base</strong>  分支，修复包在 <strong>patch</strong> 分支</p>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>2020.11.07 ：</p>
<p>根据 tinker 官方 <a href="https://github.com/BuglyDevTeam/Bugly-Android-Demo/issues/247#issuecomment-656568646">github issue</a> 中 其他人的配置：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">classpath <span class="string">&#x27;com.android.tools.build:gradle:3.4.1&#x27;</span></span><br><span class="line"></span><br><span class="line">distributionUrl=https\:<span class="comment">//services.gradle.org/distributions/gradle-5.1.1-all.zip</span></span><br><span class="line"></span><br><span class="line">implementation <span class="string">&#x27;com.tencent.bugly:crashreport_upgrade:1.4.5&#x27;</span> </span><br><span class="line">implementation <span class="string">&#x27;com.tencent.tinker:tinker-android-lib:1.9.14.5&#x27;</span> </span><br></pre></td></tr></table></figure>
<p>这样配置解决了 build gradle tool 版本过低导致 Java 8 语法的问题</p>
<p>app minSdkVersion 低于19 ，<code>multiDexEnabled  = true</code> 的时候，如果报出 xxxxloader.class 之类的不在 mianDex 时，需要手动去设置 mainDexFile，将之前报的 class 手动分配到 mainDex 中</p>
<p>app minSdkVersion &gt;= 21 时，打补丁包同样会报错，因为 google 在 api &gt;= 21 之后 mainDexFile 已经不生效了，这时需要在 <code>tinker-support.gradle</code> 中加入</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">tinkerSupport &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Android API 21 以上 无法自定义mainDexList，导致loader分到次dex中Tinker报错无法生成补丁，忽略即可</span></span><br><span class="line">    <span class="comment">// https://github.com/Tencent/tinker/issues/1084</span></span><br><span class="line">    ignoreWarning = <span class="literal">true</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Hotfix</tag>
      </tags>
  </entry>
</search>
